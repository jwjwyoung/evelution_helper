will travese_all_versions
travese_all_versions start options[:commit_unit] 
versions.length: 33
=============1 out of 33=============
Duration of reading: 0.083235
Duration: 0.098789
=============2 out of 33=============
Duration of reading: 0.098749
Duration: 0.125032
=============3 out of 33=============
Duration of reading: 0.091691
Duration: 0.143877
=============4 out of 33=============
Duration of reading: 0.093246
Duration: 0.159477
=============5 out of 33=============
CONFIG : {:constraint_analyzer_dir=>"/Users/junwenyang/Research/constraint_analyzer", :tmp_dir=>"/Users/junwenyang/Research/tmp/", :rails_best_practices_cmd=>"/Users/junwenyang/Research/rails_best_practices/bin/rails_best_practices"}
class name DocumentFolderGroup
class name Membership
FIELDS FROM constriant {"group_id"=>"integer", "person_id"=>"integer", "admin"=>"boolean", "get_email"=>"boolean", "share_address"=>"boolean", "share_mobile_phone"=>"boolean", "share_work_phone"=>"boolean", "share_fax"=>"boolean", "share_email"=>"boolean", "share_birthday"=>"boolean", "share_anniversary"=>"boolean", "updated_at"=>"datetime", "code"=>"integer", "site_id"=>"integer", "legacy_id"=>"integer", "share_home_phone"=>"boolean", "auto"=>"boolean", "created_at"=>"datetime", "roles"=>"text"}
class name PrintableDirectory
class name FamilyUpdater
class name CustomFieldValue
class name ImportPreview
class name ImportExecution
class name CustomField
class name PictureUploader
class name SigninFailure
FIELDS FROM constriant {"email"=>"string", "ip"=>"string", "created_at"=>"datetime"}
class name Tagging
FIELDS FROM constriant {"tag_id"=>"integer", "taggable_id"=>"integer", "taggable_type"=>"string", "created_at"=>"datetime"}
class name PersonCustomField
class name Verse
FIELDS FROM constriant {"reference"=>"string", "text"=>"text", "translation"=>"string", "created_at"=>"datetime", "updated_at"=>"datetime", "book"=>"integer", "chapter"=>"integer", "verse"=>"integer", "site_id"=>"integer"}
class name Document
FIELDS FROM constriant {"name"=>"string", "description"=>"string", "folder_id"=>"integer", "file_file_name"=>"string", "file_content_type"=>"string", "file_fingerprint"=>"string", "file_file_size"=>"integer", "file_updated_at"=>"datetime", "created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer"}
class name ImportParser
class name MembershipBatch
class name Search
class name AttendanceBatch
class name Family
FIELDS FROM constriant {"legacy_id"=>"integer", "name"=>"string", "last_name"=>"string", "suffix"=>"string", "address1"=>"string", "address2"=>"string", "city"=>"string", "state"=>"string", "zip"=>"string", "home_phone"=>"string", "email"=>"string", "latitude"=>"float", "longitude"=>"float", "updated_at"=>"datetime", "visible"=>"boolean", "site_id"=>"integer", "deleted"=>"boolean", "barcode_id"=>"string", "barcode_assigned_at"=>"datetime", "barcode_id_changed"=>"boolean", "alternate_barcode_id"=>"string", "photo_file_name"=>"string", "photo_content_type"=>"string", "photo_fingerprint"=>"string", "photo_file_size"=>"integer", "photo_updated_at"=>"datetime", "country"=>"string"}
class name Group
FIELDS FROM constriant {"name"=>"string", "description"=>"text", "meets"=>"string", "location"=>"string", "directions"=>"text", "other_notes"=>"text", "category"=>"string", "creator_id"=>"integer", "private"=>"boolean", "address"=>"string", "members_send"=>"boolean", "leader_id"=>"integer", "updated_at"=>"datetime", "hidden"=>"boolean", "approved"=>"boolean", "link_code"=>"string", "parents_of"=>"integer", "site_id"=>"integer", "blog"=>"boolean", "email"=>"boolean", "prayer"=>"boolean", "attendance"=>"boolean", "legacy_id"=>"integer", "gcal_private_link"=>"string", "approval_required_to_join"=>"boolean", "pictures"=>"boolean", "cm_api_list_id"=>"string", "photo_file_name"=>"string", "photo_content_type"=>"string", "photo_fingerprint"=>"string", "photo_file_size"=>"integer", "photo_updated_at"=>"datetime", "created_at"=>"datetime", "latitude"=>"float", "longitude"=>"float", "membership_mode"=>"string", "has_tasks"=>"boolean", "share_token"=>"string"}
class name MembershipRequest
FIELDS FROM constriant {"person_id"=>"integer", "group_id"=>"integer", "created_at"=>"datetime", "site_id"=>"integer"}
class name Album
FIELDS FROM constriant {"name"=>"string", "description"=>"text", "site_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime", "is_public"=>"boolean", "owner_id"=>"integer", "owner_type"=>"string"}
class name Admin
FIELDS FROM constriant {"created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer", "template_name"=>"string", "flags"=>"text", "super_admin"=>"boolean"}
class name MembershipSharingUpdater
class name Site
FIELDS FROM constriant {"name"=>"string", "host"=>"string", "created_at"=>"datetime", "updated_at"=>"datetime", "secondary_host"=>"string", "max_admins"=>"integer", "max_people"=>"integer", "max_groups"=>"integer", "import_export_enabled"=>"boolean", "pages_enabled"=>"boolean", "pictures_enabled"=>"boolean", "publications_enabled"=>"boolean", "active"=>"boolean", "twitter_enabled"=>"boolean", "external_guid"=>"string", "settings_changed_at"=>"datetime", "logo_file_name"=>"string", "logo_content_type"=>"string", "logo_fingerprint"=>"string", "logo_file_size"=>"integer", "logo_updated_at"=>"datetime", "email_host"=>"string"}
class name Setup
class name Attachment
FIELDS FROM constriant {"message_id"=>"integer", "name"=>"string", "content_type"=>"string", "created_at"=>"datetime", "site_id"=>"integer", "page_id"=>"integer", "group_id"=>"integer", "file_file_name"=>"string", "file_content_type"=>"string", "file_fingerprint"=>"string", "file_file_size"=>"integer", "file_updated_at"=>"datetime"}
class name Page
FIELDS FROM constriant {"slug"=>"string", "title"=>"string", "body"=>"text", "parent_id"=>"integer", "path"=>"string", "published"=>"boolean", "site_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime", "navigation"=>"boolean", "system"=>"boolean", "raw"=>"boolean"}
class name AttendanceRecord
FIELDS FROM constriant {"site_id"=>"integer", "person_id"=>"integer", "group_id"=>"integer", "attended_at"=>"datetime", "created_at"=>"datetime", "updated_at"=>"datetime", "first_name"=>"string", "last_name"=>"string", "family_name"=>"string", "age"=>"string", "can_pick_up"=>"string", "cannot_pick_up"=>"string", "medical_notes"=>"string"}
class name Message
FIELDS FROM constriant {"group_id"=>"integer", "person_id"=>"integer", "to_person_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime", "parent_id"=>"integer", "subject"=>"string", "body"=>"text", "share_email"=>"boolean", "code"=>"integer", "site_id"=>"integer", "html_body"=>"text"}
class name GeneratedFile
FIELDS FROM constriant {"site_id"=>"integer", "job_id"=>"integer", "person_id"=>"integer", "file_file_name"=>"string", "file_content_type"=>"string", "file_fingerprint"=>"string", "file_file_size"=>"integer", "file_updated_at"=>"datetime", "created_at"=>"datetime", "updated_at"=>"datetime"}
class name StreamItemGrouper
class name Grouper
class name ImportParser
class name Strategies::CSV
class name Setting
FIELDS FROM constriant {"section"=>"string", "name"=>"string", "format"=>"string", "value"=>"string", "description"=>"string", "hidden"=>"boolean", "created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer", "global"=>"boolean"}
class name Updater
class name PrayerRequest
FIELDS FROM constriant {"group_id"=>"integer", "person_id"=>"integer", "request"=>"text", "answer"=>"text", "answered_at"=>"datetime", "created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer"}
class name CheckinFolder
class name MailgunApi
class name Forbidden
class name KeyMissing
class name ImportRow
class name Verification
FIELDS FROM constriant {"email"=>"string", "mobile_phone"=>"string", "code"=>"integer", "verified"=>"boolean", "created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer", "carrier"=>"string"}
class name Comment
FIELDS FROM constriant {"verse_id"=>"integer", "person_id"=>"integer", "text"=>"text", "created_at"=>"datetime", "updated_at"=>"datetime", "recipe_id"=>"integer", "news_item_id"=>"integer", "song_id"=>"integer", "note_id"=>"integer", "site_id"=>"integer", "picture_id"=>"integer", "commentable"=>"string"}
class name Signup
class name Person
FIELDS FROM constriant {"legacy_id"=>"integer", "family_id"=>"integer", "position"=>"integer", "gender"=>"string", "first_name"=>"string", "last_name"=>"string", "suffix"=>"string", "mobile_phone"=>"string", "work_phone"=>"string", "fax"=>"string", "birthday"=>"datetime", "email"=>"string", "email_changed"=>"boolean", "website"=>"string", "classes"=>"text", "shepherd"=>"string", "mail_group"=>"string", "encrypted_password"=>"string", "business_name"=>"string", "business_description"=>"text", "business_phone"=>"string", "business_email"=>"string", "business_website"=>"string", "activities"=>"text", "interests"=>"text", "music"=>"text", "tv_shows"=>"text", "movies"=>"text", "books"=>"text", "quotes"=>"text", "about"=>"text", "testimony"=>"text", "share_mobile_phone"=>"boolean", "share_work_phone"=>"boolean", "share_fax"=>"boolean", "share_email"=>"boolean", "share_birthday"=>"boolean", "anniversary"=>"datetime", "updated_at"=>"datetime", "alternate_email"=>"string", "email_bounces"=>"integer", "business_category"=>"string", "account_frozen"=>"boolean", "messages_enabled"=>"boolean", "business_address"=>"string", "flags"=>"string", "visible"=>"boolean", "parental_consent"=>"string", "admin_id"=>"integer", "friends_enabled"=>"boolean", "member"=>"boolean", "staff"=>"boolean", "elder"=>"boolean", "deacon"=>"boolean", "can_sign_in"=>"boolean", "visible_to_everyone"=>"boolean", "visible_on_printed_directory"=>"boolean", "full_access"=>"boolean", "legacy_family_id"=>"integer", "feed_code"=>"string", "share_activity"=>"boolean", "site_id"=>"integer", "twitter_account"=>"string", "api_key"=>"string", "salt"=>"string", "deleted"=>"boolean", "child"=>"boolean", "custom_type"=>"string", "custom_fields"=>"text", "can_pick_up"=>"string", "cannot_pick_up"=>"string", "medical_notes"=>"string", "relationships_hash"=>"string", "photo_file_name"=>"string", "photo_content_type"=>"string", "photo_fingerprint"=>"string", "photo_file_size"=>"integer", "photo_updated_at"=>"datetime", "description"=>"string", "share_anniversary"=>"boolean", "share_address"=>"boolean", "share_home_phone"=>"boolean", "password_hash"=>"string", "password_salt"=>"string", "created_at"=>"datetime", "facebook_url"=>"string", "twitter"=>"string", "incomplete_tasks_count"=>"integer", "primary_emailer"=>"boolean"}
class name Relationship
FIELDS FROM constriant {"person_id"=>"integer", "related_id"=>"integer", "name"=>"string", "other_name"=>"string", "site_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime"}
class name DocumentFolder
FIELDS FROM constriant {"name"=>"string", "description"=>"string", "hidden"=>"boolean", "folder_id"=>"integer", "parent_folder_ids"=>"string", "path"=>"string", "created_at"=>"datetime", "updated_at"=>"datetime", "site_id"=>"integer"}
class name GroupTime
FIELDS FROM constriant {"group_id"=>"integer", "checkin_time_id"=>"integer", "print_nametag"=>"boolean", "ordering"=>"integer", "site_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime", "section"=>"string", "print_extra_nametag"=>"boolean"}
class name EmailSetup
class name Friendship
FIELDS FROM constriant {"person_id"=>"integer", "friend_id"=>"integer", "created_at"=>"datetime", "ordering"=>"integer", "site_id"=>"integer"}
class name Picture
FIELDS FROM constriant {"person_id"=>"integer", "created_at"=>"datetime", "cover"=>"boolean", "updated_at"=>"datetime", "site_id"=>"integer", "album_id"=>"integer", "original_url"=>"string", "photo_file_name"=>"string", "photo_content_type"=>"string", "photo_fingerprint"=>"string", "photo_file_size"=>"integer", "photo_updated_at"=>"datetime"}
class name ErrorRotatingPhoto
class name ProcessedMessage
FIELDS FROM constriant {"header_message_id"=>"string", "created_at"=>"datetime", "updated_at"=>"datetime"}
class name Comparator
class name Import
class name ParentalConsent
class name CheckinLabel
class name InvalidCheckinLabelPath
class name StreamItem
FIELDS FROM constriant {"site_id"=>"integer", "title"=>"string", "body"=>"text", "context"=>"text", "person_id"=>"integer", "group_id"=>"integer", "streamable_id"=>"integer", "streamable_type"=>"string", "created_at"=>"datetime", "updated_at"=>"datetime", "shared"=>"boolean", "text"=>"boolean", "is_public"=>"boolean", "false"=>"boolean"}
class name Update
FIELDS FROM constriant {"person_id"=>"integer", "created_at"=>"datetime", "complete"=>"boolean", "site_id"=>"integer", "data"=>"text", "diff"=>"text", "family_id"=>"integer"}
class name CheckinTime
FIELDS FROM constriant {"weekday"=>"integer", "time"=>"integer", "the_datetime"=>"datetime", "site_id"=>"integer", "created_at"=>"datetime", "updated_at"=>"datetime", "campus"=>"string"}
class name FriendshipRequest
FIELDS FROM constriant {"person_id"=>"integer", "from_id"=>"integer", "rejected"=>"boolean", "created_at"=>"datetime", "site_id"=>"integer"}
class name NewsItem
FIELDS FROM constriant {"title"=>"string", "link"=>"string", "body"=>"text", "published"=>"datetime", "active"=>"boolean", "site_id"=>"integer", "source"=>"string", "person_id"=>"integer", "sequence"=>"integer", "expires_at"=>"datetime", "created_at"=>"datetime", "updated_at"=>"datetime"}
class name Task
FIELDS FROM constriant {"name"=>"string", "description"=>"text", "completed"=>"boolean", "duedate"=>"date", "group"=>"string", "person"=>"string", "site"=>"string", "position"=>"integer"}
raw_query = %w{elder deacon staff member}.select
query = %w{elder deacon staff member}.select [{:method=>"", :class=>"", :class_name=>""}, {:method=>"select", :class=>"", :class_name=>""}]
Table  does not exist!

raw_query = (
@parent_folder.try(:documents) || Document.top).order(:name)
query = (
@parent_folder.try(:documents) || Document.top).order(:name) [{:method=>"", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae09678>, :class=>"", :class_name=>""}, {:method=>"top", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae09560>, :class=>"", :class_name=>""}, {:method=>"try", :class=>"", :class_name=>""}, {:method=>"order", :class=>"", :class_name=>""}, {:method=>"order", :class=>"", :class_name=>""}]
Table  does not exist!

raw_query = (
@parent_folder.try(:folders) || DocumentFolder.top).order(:name).includes(:groups)
query = (
@parent_folder.try(:folders) || DocumentFolder.top).order(:name).includes(:groups) [{:method=>"", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae09a10>, :class=>"", :class_name=>""}, {:method=>"top", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae09970>, :class=>"", :class_name=>""}, {:method=>"try", :class=>"", :class_name=>""}, {:method=>"order", :class=>"", :class_name=>""}, {:method=>"includes", :class=>"", :class_name=>""}, {:method=>"includes", :class=>"", :class_name=>""}]
Table  does not exist!

raw_query = (
Updater::PARAMS[:person].keys.flat_map { |k|
  
  expand_importable_column_name(k, ::Person)
} + Updater::PARAMS[:family].keys.flat_map { |k|
  
  expand_importable_column_name("family_#{
  k}", ::Family)
}).map(&:to_s).uniq
query = (
Updater::PARAMS[:person].keys.flat_map { |k|
  
  expand_importable_column_name(k, ::Person)
} + Updater::PARAMS[:family].keys.flat_map { |k|
  
  expand_importable_column_name("family_#{
  k}", ::Family)
}).map(&:to_s).uniq [{:method=>"", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae1b8a0>, :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae1b850>, :class=>"", :class_name=>""}, {:method=>"keys", :class=>"", :class_name=>""}, {:method=>"flat_map", :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae1b760>, :class=>"", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae1b710>, :class=>"", :class_name=>""}, {:method=>"keys", :class=>"", :class_name=>""}, {:method=>"flat_map", :class=>"", :class_name=>""}, {:method=>"map", :class=>"", :class_name=>""}, {:method=>"uniq", :class=>"", :class_name=>""}]
Table  does not exist!

raw_query = (
group_ids + parent_folders.flat_map(&:group_ids)).uniq
query = (
group_ids + parent_folders.flat_map(&:group_ids)).uniq [{:method=>"", :class=>"", :class_name=>""}, {:method=>"flat_map", :class=>"", :class_name=>""}, {:method=>"uniq", :class=>"", :class_name=>""}]
Table  does not exist!

raw_query = ::Person.in_group_ids(small_groups.pluck(:id)).where("people.id != ?", self.id)
csize1: 2
sql1 :  WHERE people.id != ?
sql2 : SELECT Person.id FROM Person  WHERE people.id != ?
csize2: 4
base = Person
	components = 	(Person.id) \
	(Person.id) \
	(Person.id) \
	(Person.id)

###fields###
raw_query = ::Person.undeleted.includes(:family, :custom_field_values).find_each
csize1: 1
sql1 :   LEFT OUTER JOIN families ON families.id = Person.family_id
sql2 : SELECT Person.id FROM Person   LEFT OUTER JOIN families ON families.id = Person.family_id
csize2: 4
base = Person
	components = 	includes(::Person.family) \
	(Person.id) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = ::Person.where(id: ids[:family_ids] + ids[:friend_ids] + ids[:groupy_ids].map(&:first))
csize1: 1
sql1 :  WHERE Person.id=?
sql2 : SELECT Person.id FROM Person  WHERE Person.id=?
csize2: 2
base = Person
	components = 	((::Person.id) = ?) \
	(Person.id)

###fields###
raw_query = @admin.people.order("last_name, first_name")
csize1: 7
sql1 :   LEFT OUTER JOIN people ON admins.id = people.admin_id ORDER BY people.first_name
sql2 : SELECT admins.id FROM admins   LEFT OUTER JOIN people ON admins.id = people.admin_id ORDER BY people.first_name
csize2: 10
base = Admin
	components = 	((Person.admin_id) = ?) \
	(Person.id) \
	(people.last_name) \
	(people.first_name) \
	order(Person.id) \
	order(people.last_name) \
	order(people.first_name) \
	(Admin.id) \
	(Person.first_name) \
	(Person.admin_id)

###fields###
raw_query = @album.pictures.order(:id).page(params[:page])
csize1: 3
sql1 :   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id
sql2 : SELECT albums.id FROM albums   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id
csize2: 6
base = Album
	components = 	((Picture.album_id) = ?) \
	(Picture.id) \
	order(Picture.id) \
	(Album.id) \
	(Picture.id) \
	(Picture.album_id)

###fields###
raw_query = @attachment.group
csize1: 1
sql1 :   LEFT OUTER JOIN groups ON groups.id = attachments.group_id
sql2 : SELECT attachments.id FROM attachments   LEFT OUTER JOIN groups ON groups.id = attachments.group_id
csize2: 4
base = Attachment
	components = 	((Group.id) = ?) \
	(Attachment.id) \
	(Group.id) \
	(Attachment.group_id)

###fields###
raw_query = @campuses.first
query = @campuses.first [{:method=>"@campuses", :class=>"Campuse", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadc1620>, :class=>"Campuse", :class_name=>""}, {:method=>"first", :class=>"Campuse", :class_name=>""}]
Table Campuse does not exist!

raw_query = @errors.map(&:last).uniq
query = @errors.map(&:last).uniq [{:method=>"@errors", :class=>"Error", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadeb0b0>, :class=>"Error", :class_name=>""}, {:method=>"map", :class=>"Error", :class_name=>""}, {:method=>"uniq", :class=>"Error", :class_name=>""}]
Table Error does not exist!

raw_query = @exposed.select(&:shared)
query = @exposed.select(&:shared) [{:method=>"@exposed", :class=>"Exposed", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae49980>, :class=>"Exposed", :class_name=>""}, {:method=>"select", :class=>"Exposed", :class_name=>""}, {:method=>"select", :class=>"Exposed", :class_name=>""}]
Table Exposed does not exist!

raw_query = @family.people.create(email: email, first_name: first_name, last_name: last_name, birthday: birthday, gender: gender, mobile_phone: mobile_phone, status: status)
csize1: 1
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id
csize2: 3
base = Family
	components = 	((Person.family_id) = ?) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = @family.people.find(params[:id])
csize1: 2
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id WHERE id = ?
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id WHERE id = ?
csize2: 5
base = Family
	components = 	((Person.family_id) = ?) \
	((Person.id) = ?) \
	(families.id) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = @family.people.undeleted.order(:position)
csize1: 4
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id ORDER BY Person.position
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id ORDER BY Person.position
csize2: 7
base = Family
	components = 	((Person.family_id) = ?) \
	(Person.position) \
	order(Person.position) \
	(Family.id) \
	(Person.position) \
	(Person.family_id)

###fields###
raw_query = @family.people.undeleted.to_a.select
csize1: 2
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id
csize2: 4
base = Family
	components = 	((Person.family_id) = ?) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = @family.reorderable_by?(@logged_in)
csize1: 0
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 1
base = Family
	query cannot be handled

raw_query = @group.admin?(@logged_in)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.admin?(@logged_in)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.album_pictures.references(:album)
csize1: 2
sql1 :   LEFT OUTER JOIN groups ON groups.id = groups.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN groups ON groups.id = groups.group_id
csize2: 4
base = Group
	components = 	((Group.group_id) = ?) \
	(Group.album) \
	(Group.id) \
	(Group.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Group", column="album", ruby_meth=nil> album
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
raw_query = @group.approval_required_to_join?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.approved?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.attendance?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.attendance_records.create!(attended_at: @attended_at, first_name: person["first_name"], last_name: person["last_name"], age: person["age"])
csize1: 1
sql1 :   LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
csize2: 3
base = Group
	components = 	((AttendanceRecord.group_id) = ?) \
	(Group.id) \
	(AttendanceRecord.group_id)

###fields###
raw_query = @group.attendance_records.create!(person_id: person.id, attended_at: @attended_at, first_name: person.first_name, last_name: person.last_name, family_name: person.family.name, age: person.age_group, can_pick_up: person.can_pick_up, cannot_pick_up: person.cannot_pick_up, medical_notes: person.medical_notes)
csize1: 1
sql1 :   LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
csize2: 3
base = Group
	components = 	((AttendanceRecord.group_id) = ?) \
	(Group.id) \
	(AttendanceRecord.group_id)

###fields###
raw_query = @group.attendance_records_for_date(@attended_at).delete_all
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.destroy
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.email?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.get_people_attendance_records_for_date(@attended_at, order_by_last: params[:order] == "last")
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.membership_requests
csize1: 1
sql1 :   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id
csize2: 3
base = Group
	components = 	((MembershipRequest.group_id) = ?) \
	(Group.id) \
	(MembershipRequest.group_id)

###fields###
raw_query = @group.membership_requests.create(person: @person)
csize1: 1
sql1 :   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id
csize2: 3
base = Group
	components = 	((MembershipRequest.group_id) = ?) \
	(Group.id) \
	(MembershipRequest.group_id)

###fields###
raw_query = @group.membership_requests.where(person_id: @ids).delete_all
csize1: 2
sql1 :   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id WHERE membership_requests.person_id=?
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN membership_requests ON groups.id = membership_requests.group_id WHERE membership_requests.person_id=?
csize2: 5
base = Group
	components = 	((MembershipRequest.group_id) = ?) \
	((MembershipRequest.person_id) = ?) \
	(MembershipRequest.person_id) \
	(Group.id) \
	(MembershipRequest.group_id)

###fields###
raw_query = @group.memberships.create(person: @logged_in, admin: true)
csize1: 1
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id
csize2: 3
base = Group
	components = 	((Membership.group_id) = ?) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.create(person: @person)
csize1: 1
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id
csize2: 3
base = Group
	components = 	((Membership.group_id) = ?) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.find(params[:id])
csize1: 2
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE id = ?
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE id = ?
csize2: 5
base = Group
	components = 	((Membership.group_id) = ?) \
	((Membership.id) = ?) \
	(groups.id) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.find(params[:id])
csize1: 2
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE id = ?
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE id = ?
csize2: 5
base = Group
	components = 	((Membership.group_id) = ?) \
	((Membership.id) = ?) \
	(groups.id) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.includes(:person).order(name_order).paginate(page: params[:page], per_page: 100)
csize1: 2
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id  LEFT OUTER JOIN people ON people.id = memberships.person_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id  LEFT OUTER JOIN people ON people.id = memberships.person_id
csize2: 6
base = Group
	components = 	((Membership.group_id) = ?) \
	includes(Membership.person) \
	(Group.id) \
	(Person.id) \
	(Membership.person_id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.where(person_id: id).first
csize1: 3
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE memberships.person_id=? LIMIT 1
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE memberships.person_id=? LIMIT 1
csize2: 6
base = Group
	components = 	((Membership.group_id) = ?) \
	((Membership.person_id) = ?) \
	return_limit(1) \
	(Membership.person_id) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.memberships.where(person_id: params[:id]).first!
csize1: 3
sql1 :   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE memberships.person_id=? LIMIT 1
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN memberships ON groups.id = memberships.group_id WHERE memberships.person_id=? LIMIT 1
csize2: 6
base = Group
	components = 	((Membership.group_id) = ?) \
	((Membership.person_id) = ?) \
	return_limit(1) \
	(Membership.person_id) \
	(Group.id) \
	(Membership.group_id)

###fields###
raw_query = @group.messages.new
csize1: 1
sql1 :   LEFT OUTER JOIN messages ON groups.id = messages.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN messages ON groups.id = messages.group_id
csize2: 3
base = Group
	components = 	((Message.group_id) = ?) \
	(Group.id) \
	(Message.group_id)

###fields###
raw_query = @group.people.minimal.order("last_name, first_name")
csize1: 8
sql1 :   LEFT OUTER JOIN people ON groups.id = people.group_id ORDER BY people.first_name
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN people ON groups.id = people.group_id ORDER BY people.first_name
csize2: 11
base = Group
	components = 	((Person.group_id) = ?) \
	(Person.id) \
	(people.last_name) \
	(people.first_name) \
	order(Person.id) \
	order(people.last_name) \
	order(people.first_name) \
	(Group.id) \
	(Person.first_name) \
	(Person.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
raw_query = @group.save
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group.share_token
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = @group.stream_items
csize1: 1
sql1 :   LEFT OUTER JOIN stream_items ON groups.id = stream_items.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN stream_items ON groups.id = stream_items.group_id
csize2: 3
base = Group
	components = 	((StreamItem.group_id) = ?) \
	(Group.id) \
	(StreamItem.group_id)

###fields###
raw_query = @group.stream_items.none
csize1: 1
sql1 :   LEFT OUTER JOIN stream_items ON groups.id = stream_items.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN stream_items ON groups.id = stream_items.group_id
csize2: 3
base = Group
	components = 	((StreamItem.group_id) = ?) \
	(Group.id) \
	(StreamItem.group_id)

###fields###
raw_query = @group.tasks.find(params[:id])
csize1: 2
sql1 :   LEFT OUTER JOIN tasks ON groups.id = tasks.group_id WHERE id = ?
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN tasks ON groups.id = tasks.group_id WHERE id = ?
csize2: 5
base = Group
	components = 	((Task.group_id) = ?) \
	((Task.id) = ?) \
	(groups.id) \
	(Group.id) \
	(Task.group_id)

###fields###
raw_query = @group.tasks.references(:task)
csize1: 2
sql1 :   LEFT OUTER JOIN tasks ON groups.id = tasks.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN tasks ON groups.id = tasks.group_id
csize2: 4
base = Group
	components = 	((Task.group_id) = ?) \
	(Task.task) \
	(Group.id) \
	(Task.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Task", column="task", ruby_meth=nil> task
raw_query = @group.try(:admin?, @logged_in)
csize1: 2
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 3
base = Group
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="admin?", ruby_meth=nil> admin?
field doesn't exist #<struct QueryColumn table="Group", column="admin?", ruby_meth="select"> admin?
raw_query = @group.update_attribute(:approved, true)
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = @group.update_attributes(group_params)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @group_time.save
csize1: 0
sql1 : 
sql2 : SELECT group_times.id FROM group_times 
csize2: 1
base = GroupTime
	query cannot be handled

raw_query = @groups.each
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @groups.order!(:name)
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = @groups.page(params[:page])
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = @groups.where!("name like ?", "%#{
params[:name]}%")
csize1: 2
sql1 :  WHERE name like ?
sql2 : SELECT groups.id FROM groups  WHERE name like ?
csize2: 4
base = Group
	components = 	(groups.name) \
	(Group.id) \
	(groups.name) \
	(Group.id)

###fields###
raw_query = @groups.where!(approved: true)
csize1: 1
sql1 :  WHERE groups.approved=?
sql2 : SELECT groups.id FROM groups  WHERE groups.approved=?
csize2: 3
base = Group
	components = 	((Group.approved) = ?) \
	(Group.approved) \
	(Group.id)

###fields###
raw_query = @groups.where!(category: params[:category])
csize1: 1
sql1 :  WHERE groups.category=?
sql2 : SELECT groups.id FROM groups  WHERE groups.category=?
csize2: 3
base = Group
	components = 	((Group.category) = ?) \
	(Group.category) \
	(Group.id)

###fields###
raw_query = @groups.where!(hidden: false)
csize1: 1
sql1 :  WHERE groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.hidden=?
csize2: 3
base = Group
	components = 	((Group.hidden) = ?) \
	(Group.hidden) \
	(Group.id)

###fields###
raw_query = @groups.where(hidden: true)
csize1: 1
sql1 :  WHERE groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.hidden=?
csize2: 3
base = Group
	components = 	((Group.hidden) = ?) \
	(Group.hidden) \
	(Group.id)

###fields###
raw_query = @import.reset_and_execute_async
csize1: 0
sql1 : 
sql2 : SELECT imports.id FROM imports 
csize2: 1
base = Import
	query cannot be handled

raw_query = @import.reset_and_execute_async
csize1: 0
sql1 : 
sql2 : SELECT imports.id FROM imports 
csize2: 1
base = Import
	query cannot be handled

raw_query = @import.rows.first.try(:import_attributes_as_hash, keep_invalid: true)
csize1: 4
sql1 :   LEFT OUTER JOIN import_rows ON imports.id = import_rows.import_id LIMIT 1
sql2 : SELECT imports.id FROM imports   LEFT OUTER JOIN import_rows ON imports.id = import_rows.import_id LIMIT 1
csize2: 6
base = Import
	components = 	((ImportRow.import_id) = ?) \
	return_limit(1) \
	(ImportRow.import_attributes_as_hash) \
	select(ImportRow.import_attributes_as_hash) \
	(Import.id) \
	(ImportRow.import_id)

###fields###
field doesn't exist #<struct QueryColumn table="ImportRow", column="import_attributes_as_hash", ruby_meth=nil> import_attributes_as_hash
field doesn't exist #<struct QueryColumn table="ImportRow", column="import_attributes_as_hash", ruby_meth="select"> import_attributes_as_hash
raw_query = @import.rows.where(status: ImportRow.statuses[row_status_before]).find_each
csize1: 2
sql1 :   LEFT OUTER JOIN import_rows ON imports.id = import_rows.import_id WHERE import_rows.status=?
sql2 : SELECT imports.id FROM imports   LEFT OUTER JOIN import_rows ON imports.id = import_rows.import_id WHERE import_rows.status=?
csize2: 5
base = Import
	components = 	((ImportRow.import_id) = ?) \
	((ImportRow.status) = ?) \
	(ImportRow.status) \
	(Import.id) \
	(ImportRow.import_id)

###fields###
raw_query = @logged_in.albums.order(:name)
query = @logged_in.albums.order(:name) [{:method=>"@logged_in", :class=>"LoggedIn", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadea2c8>, :class=>"LoggedIn", :class_name=>""}, {:method=>"albums", :class=>"LoggedIn", :class_name=>""}, {:method=>"order", :class=>"LoggedIn", :class_name=>""}, {:method=>"order", :class=>"LoggedIn", :class_name=>""}]
Table LoggedIn does not exist!

raw_query = @logged_in.generated_files.find(params[:id])
query = @logged_in.generated_files.find(params[:id]) [{:method=>"@logged_in", :class=>"LoggedIn", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae0a370>, :class=>"LoggedIn", :class_name=>""}, {:method=>"generated_files", :class=>"LoggedIn", :class_name=>""}, {:method=>"find", :class=>"LoggedIn", :class_name=>""}, {:method=>"find", :class=>"LoggedIn", :class_name=>""}]
Table LoggedIn does not exist!

raw_query = @logged_in.generated_files.where(job_id: params[:id]).first
query = @logged_in.generated_files.where(job_id: params[:id]).first [{:method=>"@logged_in", :class=>"LoggedIn", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadea5e8>, :class=>"LoggedIn", :class_name=>""}, {:method=>"generated_files", :class=>"LoggedIn", :class_name=>""}, {:method=>"where", :class=>"LoggedIn", :class_name=>""}, {:method=>"first", :class=>"LoggedIn", :class_name=>""}]
Table LoggedIn does not exist!

raw_query = @logged_in.tasks.map(&:group).uniq
query = @logged_in.tasks.map(&:group).uniq [{:method=>"@logged_in", :class=>"LoggedIn", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadfbfa0>, :class=>"LoggedIn", :class_name=>""}, {:method=>"tasks", :class=>"LoggedIn", :class_name=>""}, {:method=>"map", :class=>"LoggedIn", :class_name=>""}, {:method=>"uniq", :class=>"LoggedIn", :class_name=>""}]
Table LoggedIn does not exist!

raw_query = @memberships.order_by_birthday
csize1: 1
sql1 : 
sql2 : SELECT memberships.id FROM memberships 
csize2: 2
base = Membership
	query cannot be handled

###fields###
raw_query = @memberships.order_by_name
csize1: 1
sql1 : 
sql2 : SELECT memberships.id FROM memberships 
csize2: 2
base = Membership
	query cannot be handled

###fields###
raw_query = @message.group
csize1: 1
sql1 :   LEFT OUTER JOIN groups ON groups.id = messages.group_id
sql2 : SELECT messages.id FROM messages   LEFT OUTER JOIN groups ON groups.id = messages.group_id
csize2: 4
base = Message
	components = 	((Group.id) = ?) \
	(Message.id) \
	(Group.id) \
	(Message.group_id)

###fields###
raw_query = @message.group
csize1: 1
sql1 :   LEFT OUTER JOIN groups ON groups.id = messages.group_id
sql2 : SELECT messages.id FROM messages   LEFT OUTER JOIN groups ON groups.id = messages.group_id
csize2: 4
base = Message
	components = 	((Group.id) = ?) \
	(Message.id) \
	(Group.id) \
	(Message.group_id)

###fields###
raw_query = @people.first
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = @people.first.child?
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = @people.first.name
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = @people.first.nil?
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = @person.albums.order(created_at: :desc)
csize1: 3
sql1 :   LEFT OUTER JOIN albums ON people.id = albums.person_id ORDER BY Album.created_at
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN albums ON people.id = albums.person_id ORDER BY Album.created_at
csize2: 6
base = Person
	components = 	((Album.person_id) = ?) \
	(Album.created_at) \
	order(Album.created_at) \
	(Person.id) \
	(Album.created_at) \
	(Album.person_id)

###fields###
field doesn't exist #<struct QueryColumn table="Album", column="person_id", ruby_meth=nil> person_id
field doesn't exist #<struct QueryColumn table="Album", column="person_id", ruby_meth=nil> person_id
raw_query = @person.family.people.undeleted.where.not(id: @person.id)
csize1: 4
sql1 :   LEFT OUTER JOIN families ON families.id = people.family_id  LEFT OUTER JOIN people ON families.id = people.family_id WHERE  AND people.id=?
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN families ON families.id = people.family_id  LEFT OUTER JOIN people ON families.id = people.family_id WHERE  AND people.id=?
csize2: 4
base = Person
	components = 	((Family.id) = ?) \
	((Person.family_id) = ?) \
	((Person.id) = ?)

###fields###
raw_query = @person.friendship_requests.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = @person.friendships.to_a.select
csize1: 0
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 1
base = Person
	query cannot be handled

raw_query = @person.friendships.where(friend_id: params[:id]).first
csize1: 2
sql1 :  WHERE people.friend_id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.friend_id=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.friend_id) = ?) \
	return_limit(1) \
	(Person.friend_id) \
	(Person.id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="friend_id", ruby_meth=nil> friend_id
field doesn't exist #<struct QueryColumn table="Person", column="friend_id", ruby_meth=nil> friend_id
raw_query = @person.friendships.where(id: id).first
csize1: 2
sql1 :  WHERE people.id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.id=? LIMIT 1
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	return_limit(1) \
	(Person.id)

###fields###
raw_query = @person.groups.is_public.approved.limit(3).order("(select created_at from stream_items where group_id=groups.id order by created_at desc limit 1) desc")
csize1: 9
sql1 :  ORDER BY people.created_at
sql2 : SELECT people.id FROM people  ORDER BY people.created_at
csize2: 11
base = Person
	components = 	return_limit() \
	(Person.id) \
	(people.group_id) \
	(Group.id) \
	(people.created_at) \
	order(Person.id) \
	order(people.group_id) \
	order(Group.id) \
	order(people.created_at) \
	(Person.id) \
	(Person.created_at)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth="order"> group_id
raw_query = @person.inward_relationships.includes(:person).order("people.last_name", "people.first_name")
csize1: 7
sql1 :  ORDER BY Person.first_name
sql2 : SELECT people.id FROM people  ORDER BY Person.first_name
csize2: 9
base = Person
	components = 	(Person.id) \
	(Person.last_name) \
	(Person.id) \
	(Person.first_name) \
	order(Person.id) \
	order(Person.last_name) \
	order(Person.first_name) \
	(Person.id) \
	(Person.first_name)

###fields###
raw_query = @person.relationship.find(params[:id]).destroy
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = @person.relationships.includes(:related).order("people.last_name", "people.first_name")
csize1: 7
sql1 :  ORDER BY Person.first_name
sql2 : SELECT people.id FROM people  ORDER BY Person.first_name
csize2: 9
base = Person
	components = 	(Person.id) \
	(Person.last_name) \
	(Person.id) \
	(Person.first_name) \
	order(Person.id) \
	order(Person.last_name) \
	order(Person.first_name) \
	(Person.id) \
	(Person.first_name)

###fields###
raw_query = @person.verses.order(:book, :chapter, :verse)
csize1: 7
sql1 :   LEFT OUTER JOIN verses ON verses.id = people.verse_id ORDER BY Verse.verse
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN verses ON verses.id = people.verse_id ORDER BY Verse.verse
csize2: 11
base = Person
	components = 	((Verse.id) = ?) \
	(Verse.book) \
	(Verse.chapter) \
	(Verse.verse) \
	order(Verse.book) \
	order(Verse.chapter) \
	order(Verse.verse) \
	(Person.id) \
	(Verse.verse) \
	(Verse.id) \
	(Person.verse_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="verse_id", ruby_meth=nil> verse_id
raw_query = @person.verses.paginate(order: "created_at desc", page: params[:page])
csize1: 1
sql1 :   LEFT OUTER JOIN verses ON verses.id = people.verse_id
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN verses ON verses.id = people.verse_id
csize2: 4
base = Person
	components = 	((Verse.id) = ?) \
	(Person.id) \
	(Verse.id) \
	(Person.verse_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="verse_id", ruby_meth=nil> verse_id
raw_query = @pictures.where!("albums.is_public" => true)
csize1: 1
sql1 :  WHERE pictures.is_public"=?
sql2 : SELECT pictures.id FROM pictures  WHERE pictures.is_public"=?
csize2: 1
base = Picture
	components = 	(("albums.is_public") = ?)

raw_query = @prayer_request.send_group_email
csize1: 0
sql1 : 
sql2 : SELECT prayer_requests.id FROM prayer_requests 
csize2: 1
base = PrayerRequest
	query cannot be handled

raw_query = @prayer_request.send_group_email
csize1: 0
sql1 : 
sql2 : SELECT prayer_requests.id FROM prayer_requests 
csize2: 1
base = PrayerRequest
	query cannot be handled

raw_query = @rel.where!("concat(attendance_records.first_name, ' ', attendance_records.last_name) like ?", "%#{
params[:person_name]}%")
query = @rel.where!("concat(attendance_records.first_name, ' ', attendance_records.last_name) like ?", "%#{
params[:person_name]}%") [{:method=>"@rel", :class=>"Rel", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadcb008>, :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}]
Table Rel does not exist!

raw_query = @rel.where!(group_id: @group.id)
query = @rel.where!(group_id: @group.id) [{:method=>"@rel", :class=>"Rel", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadcb7b0>, :class=>"Rel", :class_name=>""}, {:method=>"id", :class=>"Rel", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadcb710>, :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}]
Table Rel does not exist!

raw_query = @rel.where!(group_id: @groups.map(&:id))
query = @rel.where!(group_id: @groups.map(&:id)) [{:method=>"@rel", :class=>"Rel", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadcb300>, :class=>"Rel", :class_name=>""}, {:method=>"map", :class=>"Rel", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadcb1e8>, :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}, {:method=>"where!", :class=>"Rel", :class_name=>""}]
Table Rel does not exist!

raw_query = @scope.order(*args)
query = @scope.order(*args) [{:method=>"@scope", :class=>"Scope", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae6a298>, :class=>"Scope", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae6a248>, :class=>"Scope", :class_name=>""}, {:method=>"order", :class=>"Scope", :class_name=>""}, {:method=>"order", :class=>"Scope", :class_name=>""}]
Table Scope does not exist!

raw_query = @scope.where(*args)
query = @scope.where(*args) [{:method=>"@scope", :class=>"Scope", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae6a540>, :class=>"Scope", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae6a4f0>, :class=>"Scope", :class_name=>""}, {:method=>"where", :class=>"Scope", :class_name=>""}, {:method=>"where", :class=>"Scope", :class_name=>""}]
Table Scope does not exist!

raw_query = @setup.execute!
csize1: 0
sql1 : 
sql2 : SELECT setups.id FROM setups 
csize2: 1
base = Setup
	query cannot be handled

raw_query = @stream_items.where!(person_id: params[:person_id])
csize1: 1
sql1 :  WHERE stream_items.person_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.person_id=?
csize2: 3
base = StreamItem
	components = 	((StreamItem.person_id) = ?) \
	(StreamItem.person_id) \
	(StreamItem.id)

###fields###
raw_query = @unapproved_groups.where!(creator_id: @logged_in.id)
query = @unapproved_groups.where!(creator_id: @logged_in.id) [{:method=>"@unapproved_groups", :class=>"UnapprovedGroup", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eade0278>, :class=>"UnapprovedGroup", :class_name=>""}, {:method=>"id", :class=>"UnapprovedGroup", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eade01d8>, :class=>"UnapprovedGroup", :class_name=>""}, {:method=>"where!", :class=>"UnapprovedGroup", :class_name=>""}, {:method=>"where!", :class=>"UnapprovedGroup", :class_name=>""}]
Table UnapprovedGroup does not exist!

raw_query = @verification.people.first
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT verifications.id FROM verifications  LIMIT 1
csize2: 2
base = Verification
	components = 	return_limit(1) \
	(Verification.id)

raw_query = @verification.people.first
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT verifications.id FROM verifications  LIMIT 1
csize2: 2
base = Verification
	components = 	return_limit(1) \
	(Verification.id)

raw_query = Admin.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT admins.id FROM admins  WHERE id = ?
csize2: 3
base = Admin
	components = 	((Admin.id) = ?) \
	(admins.id) \
	(Admin.id)

###fields###
raw_query = Admin.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT admins.id FROM admins  WHERE id = ?
csize2: 3
base = Admin
	components = 	((Admin.id) = ?) \
	(admins.id) \
	(Admin.id)

###fields###
raw_query = Admin.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT admins.id FROM admins  WHERE id = ?
csize2: 3
base = Admin
	components = 	((Admin.id) = ?) \
	(admins.id) \
	(Admin.id)

###fields###
raw_query = Admin.find(params[:template_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT admins.id FROM admins  WHERE id = ?
csize2: 3
base = Admin
	components = 	((Admin.id) = ?) \
	(admins.id) \
	(Admin.id)

###fields###
raw_query = Admin.where("template_name is not null").order(:template_name).select("*, (select count(*) from people where admin_id=admins.id) as people_count")
csize1: 5
sql1 :  WHERE template_name is not null ORDER BY Admin.template_name*, (select count(*) from people where admin_id=admins.id) as people_count
sql2 : SELECT admins.id FROM admins  WHERE template_name is not null ORDER BY Admin.template_name*, (select count(*) from people where admin_id=admins.id) as people_count
csize2: 5
base = Admin
	components = 	(admins.template_name) \
	(Admin.id) \
	(Admin.template_name) \
	order(Admin.template_name) \
	select(Admin.*, (select count(*) from people where admin_id=admins.id) as people_count)

###fields###
field doesn't exist #<struct QueryColumn table="Admin", column="*, (select count(*) from people where admin_id=admins.id) as people_count", ruby_meth="select"> (select count(*) from people where admin_id=admins.id) as people_count
raw_query = Admin.where(super_admin: true).map
csize1: 1
sql1 :  WHERE admins.super_admin=?
sql2 : SELECT admins.id FROM admins  WHERE admins.super_admin=?
csize2: 3
base = Admin
	components = 	((Admin.super_admin) = ?) \
	(Admin.super_admin) \
	(Admin.id)

###fields###
raw_query = Attachment.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT attachments.id FROM attachments  WHERE id = ?
csize2: 3
base = Attachment
	components = 	((Attachment.id) = ?) \
	(attachments.id) \
	(Attachment.id)

###fields###
raw_query = Attachment.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT attachments.id FROM attachments  WHERE id = ?
csize2: 3
base = Attachment
	components = 	((Attachment.id) = ?) \
	(attachments.id) \
	(Attachment.id)

###fields###
raw_query = AttendanceBatch.new(@group, params[:attended_at])
csize1: 0
sql1 : 
sql2 : SELECT attendance_batches.id FROM attendance_batches 
csize2: 1
base = AttendanceBatch
	query cannot be handled

raw_query = AttendanceBatch.new(@group, params[:attended_at])
csize1: 0
sql1 : 
sql2 : SELECT attendance_batches.id FROM attendance_batches 
csize2: 1
base = AttendanceBatch
	query cannot be handled

raw_query = AttendanceRecord.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE id = ?
csize2: 3
base = AttendanceRecord
	components = 	((AttendanceRecord.id) = ?) \
	(attendance_records.id) \
	(AttendanceRecord.id)

###fields###
raw_query = AttendanceRecord.find_for_people_and_date(@family_people.map(&:id), Date.today).group_by(&:person_id)
csize1: 1
sql1 : 
sql2 : SELECT attendance_records.id FROM attendance_records 
csize2: 2
base = AttendanceRecord
	query cannot be handled

###fields###
raw_query = AttendanceRecord.groups_for_date(@attended_at)
csize1: 0
sql1 : 
sql2 : SELECT attendance_records.id FROM attendance_records 
csize2: 1
base = AttendanceRecord
	query cannot be handled

raw_query = AttendanceRecord.on_date(@attendance_last_date).count
csize1: 1
sql1 : 
sql2 : SELECT attendance_records.id FROM attendance_records 
csize2: 2
base = AttendanceRecord
	query cannot be handled

###fields###
raw_query = AttendanceRecord.where("attended_at < ?", @attended_at.strftime("%Y/%m/%d 0:00")).maximum(:attended_at)
csize1: 3
sql1 :  WHERE attended_at < ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE attended_at < ?
csize2: 5
base = AttendanceRecord
	components = 	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(AttendanceRecord.attended_at) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id)

###fields###
raw_query = AttendanceRecord.where("attended_at > ?", @attended_at.strftime("%Y/%m/%d 23:59:59")).minimum(:attended_at)
csize1: 3
sql1 :  WHERE attended_at > ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE attended_at > ?
csize2: 5
base = AttendanceRecord
	components = 	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(AttendanceRecord.attended_at) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id)

###fields###
raw_query = AttendanceRecord.where("attended_at >= ? and attended_at <= ?", @attended_at.strftime("%Y-%m-%d 0:00"), @attended_at.strftime("%Y-%m-%d 23:59:59"))
csize1: 2
sql1 :  WHERE attended_at >= ? and attended_at <= ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE attended_at >= ? and attended_at <= ?
csize2: 4
base = AttendanceRecord
	components = 	(AttendanceRecord.id) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(attendance_records.attended_at)

###fields###
raw_query = AttendanceRecord.where(person_id: person.id, attended_at: @attended_at).delete_all
csize1: 2
sql1 :  WHERE attendance_records.person_id=? AND attendance_records.attended_at=?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE attendance_records.person_id=? AND attendance_records.attended_at=?
csize2: 5
base = AttendanceRecord
	components = 	((AttendanceRecord.person_id) = ?) \
	((AttendanceRecord.attended_at) = ?) \
	(AttendanceRecord.id) \
	(AttendanceRecord.person_id) \
	(AttendanceRecord.attended_at)

###fields###
raw_query = CheckinFolder.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_folders.id FROM checkin_folders  WHERE id = ?
csize2: 3
base = CheckinFolder
	components = 	((CheckinFolder.id) = ?) \
	(checkin_folders.id) \
	(CheckinFolder.id)

###fields###
raw_query = CheckinLabel.all.order(:name)
csize1: 2
sql1 :  ORDER BY CheckinLabel.name
sql2 : SELECT checkin_labels.id FROM checkin_labels  ORDER BY CheckinLabel.name
csize2: 4
base = CheckinLabel
	components = 	(CheckinLabel.name) \
	order(CheckinLabel.name) \
	(CheckinLabel.id) \
	(Checkinlabel.name)

###fields###
t is null #<struct QueryColumn table="Checkinlabel", column="name", ruby_meth=nil>
raw_query = CheckinLabel.all.order(:name)
csize1: 2
sql1 :  ORDER BY CheckinLabel.name
sql2 : SELECT checkin_labels.id FROM checkin_labels  ORDER BY CheckinLabel.name
csize2: 4
base = CheckinLabel
	components = 	(CheckinLabel.name) \
	order(CheckinLabel.name) \
	(CheckinLabel.id) \
	(Checkinlabel.name)

###fields###
t is null #<struct QueryColumn table="Checkinlabel", column="name", ruby_meth=nil>
raw_query = CheckinLabel.all.order(:name)
csize1: 2
sql1 :  ORDER BY CheckinLabel.name
sql2 : SELECT checkin_labels.id FROM checkin_labels  ORDER BY CheckinLabel.name
csize2: 4
base = CheckinLabel
	components = 	(CheckinLabel.name) \
	order(CheckinLabel.name) \
	(CheckinLabel.id) \
	(Checkinlabel.name)

###fields###
t is null #<struct QueryColumn table="Checkinlabel", column="name", ruby_meth=nil>
raw_query = CheckinLabel.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_labels.id FROM checkin_labels  WHERE id = ?
csize2: 3
base = CheckinLabel
	components = 	((CheckinLabel.id) = ?) \
	(checkin_labels.id) \
	(CheckinLabel.id)

###fields###
raw_query = CheckinLabel.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_labels.id FROM checkin_labels  WHERE id = ?
csize2: 3
base = CheckinLabel
	components = 	((CheckinLabel.id) = ?) \
	(checkin_labels.id) \
	(CheckinLabel.id)

###fields###
raw_query = CheckinLabel.find(params[:id]).destroy
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_labels.id FROM checkin_labels  WHERE id = ?
csize2: 3
base = CheckinLabel
	components = 	((CheckinLabel.id) = ?) \
	(checkin_labels.id) \
	(CheckinLabel.id)

###fields###
raw_query = CheckinLabel.order(:name)
csize1: 2
sql1 :  ORDER BY CheckinLabel.name
sql2 : SELECT checkin_labels.id FROM checkin_labels  ORDER BY CheckinLabel.name
csize2: 4
base = CheckinLabel
	components = 	(CheckinLabel.name) \
	order(CheckinLabel.name) \
	(CheckinLabel.id) \
	(Checkinlabel.name)

###fields###
t is null #<struct QueryColumn table="Checkinlabel", column="name", ruby_meth=nil>
raw_query = CheckinTime.find(checkin_time_id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.find(params[:time_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.find(params[:time_id]).decorate
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE id = ?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.id) = ?) \
	(checkin_times.id) \
	(CheckinTime.id)

###fields###
raw_query = CheckinTime.future_singles.order(:the_datetime)
csize1: 3
sql1 :  ORDER BY CheckinTime.the_datetime
sql2 : SELECT checkin_times.id FROM checkin_times  ORDER BY CheckinTime.the_datetime
csize2: 5
base = CheckinTime
	components = 	(CheckinTime.the_datetime) \
	order(CheckinTime.the_datetime) \
	(CheckinTime.id) \
	(Checkintime.the_datetime)

###fields###
t is null #<struct QueryColumn table="Checkintime", column="the_datetime", ruby_meth=nil>
raw_query = CheckinTime.recurring.order(:weekday, :time)
csize1: 5
sql1 :  ORDER BY CheckinTime.time
sql2 : SELECT checkin_times.id FROM checkin_times  ORDER BY CheckinTime.time
csize2: 7
base = CheckinTime
	components = 	(CheckinTime.weekday) \
	(CheckinTime.time) \
	order(CheckinTime.weekday) \
	order(CheckinTime.time) \
	(CheckinTime.id) \
	(Checkintime.time)

###fields###
t is null #<struct QueryColumn table="Checkintime", column="time", ruby_meth=nil>
raw_query = Comment.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT comments.id FROM comments  WHERE id = ?
csize2: 3
base = Comment
	components = 	((Comment.id) = ?) \
	(comments.id) \
	(Comment.id)

###fields###
raw_query = CustomField.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT custom_fields.id FROM custom_fields  WHERE id = ?
csize2: 3
base = CustomField
	components = 	((CustomField.id) = ?) \
	(custom_fields.id) \
	(CustomField.id)

###fields###
raw_query = CustomField.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT custom_fields.id FROM custom_fields  WHERE id = ?
csize2: 3
base = CustomField
	components = 	((CustomField.id) = ?) \
	(custom_fields.id) \
	(CustomField.id)

###fields###
raw_query = CustomField.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT custom_fields.id FROM custom_fields  WHERE id = ?
csize2: 3
base = CustomField
	components = 	((CustomField.id) = ?) \
	(custom_fields.id) \
	(CustomField.id)

###fields###
raw_query = CustomField.order(:name)
csize1: 2
sql1 :  ORDER BY CustomField.name
sql2 : SELECT custom_fields.id FROM custom_fields  ORDER BY CustomField.name
csize2: 4
base = CustomField
	components = 	(CustomField.name) \
	order(CustomField.name) \
	(CustomField.id) \
	(Customfield.name)

###fields###
t is null #<struct QueryColumn table="Customfield", column="name", ruby_meth=nil>
raw_query = CustomField.pluck(:id)
csize1: 2
sql1 : 
sql2 : SELECT custom_fields.id FROM custom_fields 
csize2: 3
base = CustomField
	query cannot be handled

###fields###
raw_query = Document.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT documents.id FROM documents  WHERE id = ?
csize2: 3
base = Document
	components = 	((Document.id) = ?) \
	(documents.id) \
	(Document.id)

###fields###
raw_query = Document.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT documents.id FROM documents  WHERE id = ?
csize2: 3
base = Document
	components = 	((Document.id) = ?) \
	(documents.id) \
	(Document.id)

###fields###
raw_query = Document.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT documents.id FROM documents  WHERE id = ?
csize2: 3
base = Document
	components = 	((Document.id) = ?) \
	(documents.id) \
	(Document.id)

###fields###
raw_query = Document.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT documents.id FROM documents  WHERE id = ?
csize2: 3
base = Document
	components = 	((Document.id) = ?) \
	(documents.id) \
	(Document.id)

###fields###
raw_query = Document.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT documents.id FROM documents  WHERE id = ?
csize2: 3
base = Document
	components = 	((Document.id) = ?) \
	(documents.id) \
	(Document.id)

###fields###
raw_query = DocumentFolder.find(params[:folder_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT document_folders.id FROM document_folders  WHERE id = ?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(document_folders.id) \
	(DocumentFolder.id)

###fields###
raw_query = DocumentFolder.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT document_folders.id FROM document_folders  WHERE id = ?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(document_folders.id) \
	(DocumentFolder.id)

###fields###
raw_query = DocumentFolder.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT document_folders.id FROM document_folders  WHERE id = ?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(document_folders.id) \
	(DocumentFolder.id)

###fields###
raw_query = DocumentFolder.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT document_folders.id FROM document_folders  WHERE id = ?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(document_folders.id) \
	(DocumentFolder.id)

###fields###
raw_query = DocumentFolder.find(parent_folder_ids).sort_by
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT document_folders.id FROM document_folders  WHERE id = ?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(document_folders.id) \
	(DocumentFolder.id)

###fields###
raw_query = DocumentFolder.where.not(id: folder.try(:id) || 0).order(:path).reject { |f|
  
  f.parent_folder_ids.include?(folder.try(:id))
}.map
csize1: 3
sql1 :  WHERE  AND document_folders.id=? ORDER BY DocumentFolder.path
sql2 : SELECT document_folders.id FROM document_folders  WHERE  AND document_folders.id=? ORDER BY DocumentFolder.path
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.id) = ?) \
	(DocumentFolder.path) \
	order(DocumentFolder.path)

###fields###
raw_query = Family.create!(name: @person.name, last_name: @person.last_name)
csize1: 0
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 1
base = Family
	query cannot be handled

raw_query = Family.create(name: "#{
first_name} #{
last_name}", last_name: last_name)
csize1: 0
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 1
base = Family
	query cannot be handled

raw_query = Family.create(name: "#{
first_name} #{
last_name}", last_name: last_name)
csize1: 0
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 1
base = Family
	query cannot be handled

raw_query = Family.find(@family_id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(family_id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(id).destroy
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(params[:family_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(params[:family_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(params[:family_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(params[:family_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.includes(:people)
csize1: 1
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id
csize2: 3
base = Family
	components = 	includes(Family.people) \
	(Family.id) \
	(Person.family_id)

###fields###
field doesn't exist #<struct QueryColumn table="Family", column="people", ruby_meth="includes"> people
raw_query = Family.new(family_params.merge(name: @person.name, last_name: @person.last_name))
csize1: 0
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 1
base = Family
	query cannot be handled

raw_query = Family.order("last_name, name").paginate(page: params[:page], per_page: params[:per_page] || MAX_EXPORT_AT_A_TIME)
csize1: 6
sql1 :  ORDER BY families.name
sql2 : SELECT families.id FROM families  ORDER BY families.name
csize2: 8
base = Family
	components = 	(Family.id) \
	(families.last_name) \
	(families.name) \
	order(Family.id) \
	order(families.last_name) \
	order(families.name) \
	(Family.id) \
	(Family.name)

###fields###
raw_query = Family.undeleted.by_barcode(params[:barcode]).first
csize1: 3
sql1 :  LIMIT 1
sql2 : SELECT families.id FROM families  LIMIT 1
csize2: 4
base = Family
	components = 	return_limit(1) \
	(Family.id)

###fields###
raw_query = Family.undeleted.find(params[:family_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 4
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.undeleted.find(params[:family_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 4
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.undeleted.find(params[:id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 4
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.undeleted.find(params[:id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT families.id FROM families  WHERE id = ?
csize2: 4
base = Family
	components = 	((Family.id) = ?) \
	(families.id) \
	(Family.id)

###fields###
raw_query = Family.undeleted.has_printable_people.order("families.last_name, families.name, people.position").includes(:people).references(:people)
csize1: 12
sql1 :  ORDER BY Person.position  LEFT OUTER JOIN people ON families.id = people.family_id
sql2 : SELECT families.id FROM families  ORDER BY Person.position  LEFT OUTER JOIN people ON families.id = people.family_id
csize2: 12
base = Family
	components = 	(Family.id) \
	(Family.last_name) \
	(Family.name) \
	(Person.position) \
	order(Family.id) \
	order(Family.last_name) \
	order(Family.name) \
	order(Person.position) \
	includes(Family.people) \
	(Family.people)

###fields###
field doesn't exist #<struct QueryColumn table="Family", column="people", ruby_meth="includes"> people
field doesn't exist #<struct QueryColumn table="Family", column="people", ruby_meth=nil> people
raw_query = Family.undeleted.includes(people: :custom_field_values).find_each
csize1: 1
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 2
base = Family
	query cannot be handled

###fields###
raw_query = Family.undeleted.where(["(select count(id) from people where deleted = ? and family_id=families.id) = 0", false]).order("name")
csize1: 5
sql1 :  WHERE (select count(id) from people where deleted = ? and family_id=families.id) = 0
false
 ORDER BY families.name
sql2 : SELECT families.id FROM families  WHERE (select count(id) from people where deleted = ? and family_id=families.id) = 0
false
 ORDER BY families.name
csize2: 5
base = Family
	components = 	(Family.id) \
	(families.name) \
	order(Family.id) \
	order(families.name)

###fields###
raw_query = Family.undeleted.where(email: params[:email].downcase).first
csize1: 3
sql1 :  WHERE families.email=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.email=? LIMIT 1
csize2: 5
base = Family
	components = 	((Family.email) = ?) \
	return_limit(1) \
	(Family.email) \
	(Family.id)

###fields###
raw_query = Family.where("barcode_id is not null and barcode_id != '' and deleted = ?", false)
csize1: 3
sql1 :  WHERE barcode_id is not null and barcode_id != '' and deleted = ?
sql2 : SELECT families.id FROM families  WHERE barcode_id is not null and barcode_id != '' and deleted = ?
csize2: 6
base = Family
	components = 	(Family.id) \
	(families.barcode_id) \
	(families.deleted) \
	(Family.id) \
	(families.barcode_id) \
	(families.deleted)

###fields###
raw_query = Family.where(alternate_barcode_id: params[:id], deleted: false).first
csize1: 3
sql1 :  WHERE families.alternate_barcode_id=? AND families.deleted=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.alternate_barcode_id=? AND families.deleted=? LIMIT 1
csize2: 6
base = Family
	components = 	((Family.alternate_barcode_id) = ?) \
	((Family.deleted) = ?) \
	return_limit(1) \
	(Family.id) \
	(Family.alternate_barcode_id) \
	(Family.deleted)

###fields###
raw_query = Family.where(barcode_id: params[:id], deleted: false).first
csize1: 3
sql1 :  WHERE families.barcode_id=? AND families.deleted=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.barcode_id=? AND families.deleted=? LIMIT 1
csize2: 6
base = Family
	components = 	((Family.barcode_id) = ?) \
	((Family.deleted) = ?) \
	return_limit(1) \
	(Family.id) \
	(Family.barcode_id) \
	(Family.deleted)

###fields###
raw_query = Family.where(id: params[:id], deleted: false).first
csize1: 3
sql1 :  WHERE families.id=? AND families.deleted=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.id=? AND families.deleted=? LIMIT 1
csize2: 5
base = Family
	components = 	((Family.id) = ?) \
	((Family.deleted) = ?) \
	return_limit(1) \
	(Family.id) \
	(Family.deleted)

###fields###
raw_query = Family.where(legacy_id: params[:id]).first
csize1: 2
sql1 :  WHERE families.legacy_id=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.legacy_id=? LIMIT 1
csize2: 4
base = Family
	components = 	((Family.legacy_id) = ?) \
	return_limit(1) \
	(Family.legacy_id) \
	(Family.id)

###fields###
raw_query = File.split(attachment.filename.to_s).last
query = File.split(attachment.filename.to_s).last [{:method=>"File", :class=>"File", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae40948>, :class=>"File", :class_name=>""}, {:method=>"filename", :class=>"File", :class_name=>""}, {:method=>"to_s", :class=>"File", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae407e0>, :class=>"File", :class_name=>""}, {:method=>"split", :class=>"File", :class_name=>""}, {:method=>"last", :class=>"File", :class_name=>""}]
Table File does not exist!

raw_query = Github.repos.releases.all(GITHUB_REPO_OWNER, GITHUB_REPO_NAME).first
query = Github.repos.releases.all(GITHUB_REPO_OWNER, GITHUB_REPO_NAME).first [{:method=>"Github", :class=>"Github", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb37a0>, :class=>"Github", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3750>, :class=>"Github", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb36b0>, :class=>"Github", :class_name=>""}, {:method=>"repos", :class=>"Github", :class_name=>""}, {:method=>"releases", :class=>"Github", :class_name=>""}, {:method=>"all", :class=>"Github", :class_name=>""}, {:method=>"first", :class=>"Github", :class_name=>""}]
Table Github does not exist!

raw_query = Group.approved.order(:name)
csize1: 3
sql1 :  ORDER BY Group.name
sql2 : SELECT groups.id FROM groups  ORDER BY Group.name
csize2: 3
base = Group
	components = 	select(Group.approved) \
	(Group.name) \
	order(Group.name)

###fields###
raw_query = Group.find(ids[:groupy_ids].select { |id, group_id|
  
  id == person.id
}.map(&:last))
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(options[:group_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:group_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:group_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:group_id]).people.order("last_name, first_name").to_a
csize1: 8
sql1 :  WHERE id = ?  LEFT OUTER JOIN people ON groups.id = people.group_id ORDER BY people.first_name
sql2 : SELECT groups.id FROM groups  WHERE id = ?  LEFT OUTER JOIN people ON groups.id = people.group_id ORDER BY people.first_name
csize2: 8
base = Group
	components = 	((Group.id) = ?) \
	((Person.group_id) = ?) \
	(Person.id) \
	(people.last_name) \
	(people.first_name) \
	order(Person.id) \
	order(people.last_name) \
	order(people.first_name)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
raw_query = Group.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:ids])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(params[:message][:group_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT groups.id FROM groups  WHERE id = ?
csize2: 3
base = Group
	components = 	((Group.id) = ?) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.find(parents_of).people.map(&:parents).flatten.uniq
csize1: 4
sql1 :  WHERE id = ?  LEFT OUTER JOIN people ON groups.id = people.group_id
sql2 : SELECT groups.id FROM groups  WHERE id = ?  LEFT OUTER JOIN people ON groups.id = people.group_id
csize2: 4
base = Group
	components = 	((Group.id) = ?) \
	((Person.group_id) = ?) \
	(Person.parents) \
	distinct()

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="parents", ruby_meth=nil> parents
raw_query = Group.find_by_sql("select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and site_id = #{
Site.current.id} group by category").map
csize1: 2
sql1 :  select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and site_id = ?  group by category
sql2 : SELECT groups.id FROM groups  select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and site_id = ?  group by category
csize2: 2
base = Group
	components = 	(groups.category) \
	(groups.site_id)

###fields###
raw_query = Group.find_by_sql(["select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and hidden = ? and approved = ? and site_id = #{
Site.current.id} group by category", false, true]).map
csize1: 0
sql1 :  select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and hidden = ? and approved = ? and site_id = ?  group by category
false
true
sql2 : SELECT groups.id FROM groups  select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and hidden = ? and approved = ? and site_id = ?  group by category
false
true
csize2: 0
base = Group
	components = 

raw_query = Group.find_each
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = Group.find_each
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = Group.new(group_params)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = Group.order("category, name")
csize1: 6
sql1 :  ORDER BY groups.name
sql2 : SELECT groups.id FROM groups  ORDER BY groups.name
csize2: 8
base = Group
	components = 	(Group.id) \
	(groups.category) \
	(groups.name) \
	order(Group.id) \
	order(groups.category) \
	order(groups.name) \
	(Group.id) \
	(Group.name)

###fields###
raw_query = Group.order("category, name")
csize1: 6
sql1 :  ORDER BY groups.name
sql2 : SELECT groups.id FROM groups  ORDER BY groups.name
csize2: 8
base = Group
	components = 	(Group.id) \
	(groups.category) \
	(groups.name) \
	order(Group.id) \
	order(groups.category) \
	order(groups.name) \
	(Group.id) \
	(Group.name)

###fields###
raw_query = Group.where("id > ?", @logged_in.last_seen_group_id.to_i)
csize1: 2
sql1 :  WHERE id > ?
sql2 : SELECT groups.id FROM groups  WHERE id > ?
csize2: 4
base = Group
	components = 	(groups.id) \
	(Group.id) \
	(groups.id) \
	(Group.id)

###fields###
raw_query = Group.where("id in (select group_id from attendance_records where attended_at >= ? and attended_at <= ?)", attended_at.strftime("%Y-%m-%d 0:00"), attended_at.strftime("%Y-%m-%d 23:59:59")).order("name")
csize1: 8
sql1 :  WHERE id in (select group_id from attendance_records where attended_at >= ? and attended_at <= ?) ORDER BY groups.name
sql2 : SELECT groups.id FROM groups  WHERE id in (select group_id from attendance_records where attended_at >= ? and attended_at <= ?) ORDER BY groups.name
csize2: 13
base = Group
	components = 	(groups.id) \
	(Group.id) \
	(groups.group_id) \
	(groups.attended_at) \
	(Group.id) \
	(groups.name) \
	order(Group.id) \
	order(groups.name) \
	(groups.id) \
	(Group.id) \
	(Group.name) \
	(groups.group_id) \
	(groups.attended_at)

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Group", column="attended_at", ruby_meth=nil> attended_at
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Group", column="attended_at", ruby_meth=nil> attended_at
raw_query = Group.where(id: all_group_ids)
csize1: 1
sql1 :  WHERE groups.id=?
sql2 : SELECT groups.id FROM groups  WHERE groups.id=?
csize2: 2
base = Group
	components = 	((Group.id) = ?) \
	(Group.id)

###fields###
raw_query = Group.where(id: parent_folder_group_ids)
csize1: 1
sql1 :  WHERE groups.id=?
sql2 : SELECT groups.id FROM groups  WHERE groups.id=?
csize2: 2
base = Group
	components = 	((Group.id) = ?) \
	(Group.id)

###fields###
raw_query = Group.where(parents_of: id).each
csize1: 1
sql1 :  WHERE groups.parents_of=?
sql2 : SELECT groups.id FROM groups  WHERE groups.parents_of=?
csize2: 3
base = Group
	components = 	((Group.parents_of) = ?) \
	(Group.parents_of) \
	(Group.id)

###fields###
raw_query = GroupTime.find(group_time_hash["id"])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT group_times.id FROM group_times  WHERE id = ?
csize2: 3
base = GroupTime
	components = 	((GroupTime.id) = ?) \
	(group_times.id) \
	(GroupTime.id)

###fields###
raw_query = GroupTime.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT group_times.id FROM group_times  WHERE id = ?
csize2: 3
base = GroupTime
	components = 	((GroupTime.id) = ?) \
	(group_times.id) \
	(GroupTime.id)

###fields###
raw_query = GroupTime.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT group_times.id FROM group_times  WHERE id = ?
csize2: 3
base = GroupTime
	components = 	((GroupTime.id) = ?) \
	(group_times.id) \
	(GroupTime.id)

###fields###
raw_query = GroupTime.includes(:checkin_folder).references(:checkin_folders).order("coalesce(checkin_folders.sequence, group_times.sequence)").where("group_times.checkin_folder_id in (?) or group_times.checkin_time_id = ?", checkin_folder_ids, id)
csize1: 11
sql1 :   LEFT OUTER JOIN checkin_folders ON checkin_folders.id = group_times.checkin_folder_id ORDER BY GroupTime.sequence WHERE group_times.checkin_folder_id in (?) or group_times.checkin_time_id = ?
sql2 : SELECT group_times.id FROM group_times   LEFT OUTER JOIN checkin_folders ON checkin_folders.id = group_times.checkin_folder_id ORDER BY GroupTime.sequence WHERE group_times.checkin_folder_id in (?) or group_times.checkin_time_id = ?
csize2: 11
base = GroupTime
	components = 	includes(GroupTime.checkin_folder) \
	(GroupTime.checkin_folders) \
	(GroupTime.id) \
	(CheckinFolder.sequence) \
	(GroupTime.sequence) \
	order(GroupTime.id) \
	order(CheckinFolder.sequence) \
	order(GroupTime.sequence) \
	(GroupTime.id) \
	(GroupTime.checkin_folder_id) \
	(GroupTime.checkin_time_id)

###fields###
field doesn't exist #<struct QueryColumn table="GroupTime", column="checkin_folders", ruby_meth=nil> checkin_folders
raw_query = GroupTime.where("coalesce(section, '') != ''").distinct(:section).pluck(:section)
csize1: 6
sql1 :  WHERE coalesce(section, '') != ''
sql2 : SELECT group_times.id FROM group_times  WHERE coalesce(section, '') != ''
csize2: 8
base = GroupTime
	components = 	(GroupTime.id) \
	(group_times.section) \
	(GroupTime.section) \
	distinct() \
	(GroupTime.section) \
	select(GroupTime.section) \
	(GroupTime.id) \
	(group_times.section)

###fields###
raw_query = Import.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT imports.id FROM imports  WHERE id = ?
csize2: 3
base = Import
	components = 	((Import.id) = ?) \
	(imports.id) \
	(Import.id)

###fields###
raw_query = Import.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT imports.id FROM imports  WHERE id = ?
csize2: 3
base = Import
	components = 	((Import.id) = ?) \
	(imports.id) \
	(Import.id)

###fields###
raw_query = Import.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT imports.id FROM imports  WHERE id = ?
csize2: 3
base = Import
	components = 	((Import.id) = ?) \
	(imports.id) \
	(Import.id)

###fields###
raw_query = Import.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT imports.id FROM imports  WHERE id = ?
csize2: 3
base = Import
	components = 	((Import.id) = ?) \
	(imports.id) \
	(Import.id)

###fields###
raw_query = Import.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT imports.id FROM imports  WHERE id = ?
csize2: 3
base = Import
	components = 	((Import.id) = ?) \
	(imports.id) \
	(Import.id)

###fields###
raw_query = Import.last
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT imports.id FROM imports  LIMIT 1
csize2: 2
base = Import
	components = 	return_limit(1) \
	(Import.id)

raw_query = Import.order(:created_at).last
csize1: 3
sql1 :  ORDER BY Import.created_at LIMIT 1
sql2 : SELECT imports.id FROM imports  ORDER BY Import.created_at LIMIT 1
csize2: 5
base = Import
	components = 	(Import.created_at) \
	order(Import.created_at) \
	return_limit(1) \
	(Import.id) \
	(Import.created_at)

###fields###
raw_query = Import.order(created_at: :desc).includes(:person).with_row_counts.page(params[:page])
csize1: 4
sql1 :  ORDER BY Import.created_at  LEFT OUTER JOIN people ON people.id = imports.person_id
sql2 : SELECT imports.id FROM imports  ORDER BY Import.created_at  LEFT OUTER JOIN people ON people.id = imports.person_id
csize2: 4
base = Import
	components = 	(Import.created_at) \
	order(Import.created_at) \
	includes(Import.person)

###fields###
raw_query = Membership.find(membership_id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT memberships.id FROM memberships  WHERE id = ?
csize2: 3
base = Membership
	components = 	((Membership.id) = ?) \
	(memberships.id) \
	(Membership.id)

###fields###
raw_query = Membership.where(admin: true).includes(:group, :person).map { |m|
  
  [m.person, m.group]
}.sort_by
csize1: 3
sql1 :  WHERE memberships.admin=?  LEFT OUTER JOIN groups ON groups.id = memberships.group_id  LEFT OUTER JOIN people ON people.id = memberships.person_id
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.admin=?  LEFT OUTER JOIN groups ON groups.id = memberships.group_id  LEFT OUTER JOIN people ON people.id = memberships.person_id
csize2: 3
base = Membership
	components = 	((Membership.admin) = ?) \
	includes(Membership.group) \
	includes(Membership.person)

###fields###
raw_query = Membership.where(group_id: group_id, person_id: person_id).first
csize1: 3
sql1 :  WHERE memberships.group_id=? AND memberships.person_id=? LIMIT 1
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.group_id=? AND memberships.person_id=? LIMIT 1
csize2: 6
base = Membership
	components = 	((Membership.group_id) = ?) \
	((Membership.person_id) = ?) \
	return_limit(1) \
	(Membership.id) \
	(Membership.group_id) \
	(Membership.person_id)

###fields###
raw_query = MembershipBatch.new(@group, params[:ids])
csize1: 0
sql1 : 
sql2 : SELECT membership_batches.id FROM membership_batches 
csize2: 1
base = MembershipBatch
	query cannot be handled

raw_query = MembershipRequest.all.to_a.group_by(&:group)
csize1: 1
sql1 : 
sql2 : SELECT membership_requests.id FROM membership_requests 
csize2: 2
base = MembershipRequest
	query cannot be handled

###fields###
raw_query = Message.create(group: group, parent: parent, person: @person, subject: email.subject, body: clean_body(body[:text]), html_body: clean_body(body[:html]), dont_send: true)
csize1: 0
sql1 : 
sql2 : SELECT messages.id FROM messages 
csize2: 1
base = Message
	query cannot be handled

raw_query = Message.find(params[:parent_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT messages.id FROM messages  WHERE id = ?
csize2: 3
base = Message
	components = 	((Message.id) = ?) \
	(messages.id) \
	(Message.id)

###fields###
raw_query = Message.new(parent: @parent, group_id: @parent.group_id, subject: "Re: #{
@parent.subject}")
csize1: 0
sql1 : 
sql2 : SELECT messages.id FROM messages 
csize2: 1
base = Message
	query cannot be handled

raw_query = Message.unscoped
csize1: 0
sql1 : 
sql2 : SELECT messages.id FROM messages 
csize2: 1
base = Message
	query cannot be handled

raw_query = Message.where(id: $1).first
csize1: 2
sql1 :  WHERE messages.id=? LIMIT 1
sql2 : SELECT messages.id FROM messages  WHERE messages.id=? LIMIT 1
csize2: 3
base = Message
	components = 	((Message.id) = ?) \
	return_limit(1) \
	(Message.id)

###fields###
raw_query = Message.where(id: message_id).first
csize1: 2
sql1 :  WHERE messages.id=? LIMIT 1
sql2 : SELECT messages.id FROM messages  WHERE messages.id=? LIMIT 1
csize2: 3
base = Message
	components = 	((Message.id) = ?) \
	return_limit(1) \
	(Message.id)

###fields###
raw_query = Message.where(id: message_id).first
csize1: 2
sql1 :  WHERE messages.id=? LIMIT 1
sql2 : SELECT messages.id FROM messages  WHERE messages.id=? LIMIT 1
csize2: 3
base = Message
	components = 	((Message.id) = ?) \
	return_limit(1) \
	(Message.id)

###fields###
raw_query = NewsItem.active.order("published desc").includes(:person).page(params[:page])
csize1: 6
sql1 :  ORDER BY news_items.published  LEFT OUTER JOIN people ON people.id = news_items.person_id
sql2 : SELECT news_items.id FROM news_items  ORDER BY news_items.published  LEFT OUTER JOIN people ON people.id = news_items.person_id
csize2: 6
base = NewsItem
	components = 	select(NewsItem.active) \
	(NewsItem.id) \
	(news_items.published) \
	order(NewsItem.id) \
	order(news_items.published) \
	includes(NewsItem.person)

###fields###
raw_query = NewsItem.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT news_items.id FROM news_items  WHERE id = ?
csize2: 3
base = NewsItem
	components = 	((NewsItem.id) = ?) \
	(news_items.id) \
	(NewsItem.id)

###fields###
raw_query = NewsItem.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT news_items.id FROM news_items  WHERE id = ?
csize2: 3
base = NewsItem
	components = 	((NewsItem.id) = ?) \
	(news_items.id) \
	(NewsItem.id)

###fields###
raw_query = NewsItem.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT news_items.id FROM news_items  WHERE id = ?
csize2: 3
base = NewsItem
	components = 	((NewsItem.id) = ?) \
	(news_items.id) \
	(NewsItem.id)

###fields###
raw_query = NewsItem.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT news_items.id FROM news_items  WHERE id = ?
csize2: 3
base = NewsItem
	components = 	((NewsItem.id) = ?) \
	(news_items.id) \
	(NewsItem.id)

###fields###
raw_query = NewsItem.where(active: true).includes(:person).limit(30).order("published desc")
csize1: 7
sql1 :  WHERE news_items.active=?  LEFT OUTER JOIN people ON people.id = news_items.person_id ORDER BY news_items.published
sql2 : SELECT news_items.id FROM news_items  WHERE news_items.active=?  LEFT OUTER JOIN people ON people.id = news_items.person_id ORDER BY news_items.published
csize2: 7
base = NewsItem
	components = 	((NewsItem.active) = ?) \
	includes(NewsItem.person) \
	return_limit() \
	(NewsItem.id) \
	(news_items.published) \
	order(NewsItem.id) \
	order(news_items.published)

###fields###
raw_query = Page.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT pages.id FROM pages  WHERE id = ?
csize2: 3
base = Page
	components = 	((Page.id) = ?) \
	(pages.id) \
	(Page.id)

###fields###
raw_query = Page.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT pages.id FROM pages  WHERE id = ?
csize2: 3
base = Page
	components = 	((Page.id) = ?) \
	(pages.id) \
	(Page.id)

###fields###
raw_query = Page.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT pages.id FROM pages  WHERE id = ?
csize2: 3
base = Page
	components = 	((Page.id) = ?) \
	(pages.id) \
	(Page.id)

###fields###
raw_query = Page.find_by_id_or_path(@path)
csize1: 2
sql1 :  WHERE id = ? or path = ?
sql2 : SELECT pages.id FROM pages  WHERE id = ? or path = ?
csize2: 5
base = Page
	components = 	((Page.id) = ?) \
	((Page.path) = ?) \
	(Page.id) \
	(pages.id) \
	(pages.path)

###fields###
raw_query = Page.where(parent_id: nil, published: published, navigation: navigation).to_a.select
csize1: 3
sql1 :  WHERE pages.parent_id=? AND pages.published=? AND pages.navigation=?
sql2 : SELECT pages.id FROM pages  WHERE pages.parent_id=? AND pages.published=? AND pages.navigation=?
csize2: 7
base = Page
	components = 	((Page.parent_id) = ?) \
	((Page.published) = ?) \
	((Page.navigation) = ?) \
	(Page.id) \
	(Page.parent_id) \
	(Page.published) \
	(Page.navigation)

###fields###
raw_query = Page.where(path: path).first
csize1: 2
sql1 :  WHERE pages.path=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.path=? LIMIT 1
csize2: 4
base = Page
	components = 	((Page.path) = ?) \
	return_limit(1) \
	(Page.path) \
	(Page.id)

###fields###
raw_query = Page.where(path: path).first
csize1: 2
sql1 :  WHERE pages.path=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.path=? LIMIT 1
csize2: 4
base = Page
	components = 	((Page.path) = ?) \
	return_limit(1) \
	(Page.path) \
	(Page.id)

###fields###
raw_query = Page.where(path: path, published: true).first
csize1: 3
sql1 :  WHERE pages.path=? AND pages.published=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.path=? AND pages.published=? LIMIT 1
csize2: 6
base = Page
	components = 	((Page.path) = ?) \
	((Page.published) = ?) \
	return_limit(1) \
	(Page.id) \
	(Page.path) \
	(Page.published)

###fields###
raw_query = Page.where(system: true, published: true).order(:title)
csize1: 4
sql1 :  WHERE pages.system=? AND pages.published=? ORDER BY Page.title
sql2 : SELECT pages.id FROM pages  WHERE pages.system=? AND pages.published=? ORDER BY Page.title
csize2: 8
base = Page
	components = 	((Page.system) = ?) \
	((Page.published) = ?) \
	(Page.title) \
	order(Page.title) \
	(Page.id) \
	(Page.title) \
	(Page.system) \
	(Page.published)

###fields###
raw_query = Person.create(provider: auth["provider"], uid: auth["uid"], first_name: first_name, last_name: last_name, email: auth["info"]["email"], family: family, status: :pending)
csize1: 1
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 2
base = Person
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="pending", ruby_meth=nil> pending
raw_query = Person.eager_load(:family, :groups)
csize1: 1
sql1 :   LEFT OUTER JOIN families ON families.id = people.family_id
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN families ON families.id = people.family_id
csize2: 4
base = Person
	components = 	includes(Person.family) \
	(Person.id) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = Person.find(@id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find([].append(group_scope && group.memberships.pluck(:person_id)).flatten.append(person_id).reject(&:!)).each
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(id).update_attribute(:email_changed, false)
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(Person.email_changed) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(id).update_attribute(:family_id, params[:family_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(Person.family_id) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:friend_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:message][:to_person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(params[:to_person_id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.find(person_id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.includes(:family).references(:family).where(conditions).order(params[:sort]).paginate(page: params[:page], per_page: 100)
csize1: 2
sql1 :   LEFT OUTER JOIN families ON families.id = people.family_id WHERE 
sql2 : SELECT people.id FROM people   LEFT OUTER JOIN families ON families.id = people.family_id WHERE 
csize2: 2
base = Person
	components = 	includes(Person.family) \
	(Person.family)

###fields###
raw_query = Person.joins(:family)
csize1: 1
sql1 :   INNER JOIN families ON families.id = people.family_id
sql2 : SELECT people.id FROM people   INNER JOIN families ON families.id = people.family_id
csize2: 4
base = Person
	components = 	joins(Person.family) \
	(Person.id) \
	(Family.id) \
	(Person.family_id)

###fields###
raw_query = Person.joins(:family).where("families.id in (#{
families.map(&:id).join(",")}) and people.deleted = ?", false).select(select)
csize1: 4
sql1 :   INNER JOIN families ON families.id = people.family_id WHERE families.id in (? ) and people.deleted = ?
sql2 : SELECT people.id FROM people   INNER JOIN families ON families.id = people.family_id WHERE families.id in (? ) and people.deleted = ?
csize2: 8
base = Person
	components = 	joins(Person.family) \
	(Person.id) \
	(Family.id) \
	(Person.deleted) \
	(Person.id) \
	(Family.id) \
	(Person.family_id) \
	(Person.deleted)

###fields###
raw_query = Person.logged_in.admin?(:manage_groups)
csize1: 1
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 2
base = Person
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="manage_groups", ruby_meth=nil> manage_groups
raw_query = Person.undeleted.find(Array(params[:ids]).first)
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.find(params[:person_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.find(params[:person_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.find(params[:person_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.find(params[:person_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.find(params[:person_id])
csize1: 2
sql1 :  WHERE id = ?
sql2 : SELECT people.id FROM people  WHERE id = ?
csize2: 4
base = Person
	components = 	((Person.id) = ?) \
	(people.id) \
	(Person.id)

###fields###
raw_query = Person.undeleted.joins(:family).where("(families.barcode_id = ? or families.alternate_barcode_id = ?)", params[:family_barcode_id], params[:family_barcode_id]).select(select)
csize1: 5
sql1 :   INNER JOIN families ON families.id = people.family_id WHERE (families.barcode_id = ? or families.alternate_barcode_id = ?)
sql2 : SELECT people.id FROM people   INNER JOIN families ON families.id = people.family_id WHERE (families.barcode_id = ? or families.alternate_barcode_id = ?)
csize2: 10
base = Person
	components = 	joins(Person.family) \
	(Person.id) \
	(Family.barcode_id) \
	(Family.alternate_barcode_id) \
	(Person.id) \
	(Family.id) \
	(Person.family_id) \
	(Family.barcode_id) \
	(Family.alternate_barcode_id)

###fields###
raw_query = Person.undeleted.where(email: email).where.not(id: id || 0).where.not(family_id: family_id || 0).any?
csize1: 4
sql1 :  WHERE people.email=? AND  AND people.id=? AND  AND people.family_id=?
sql2 : SELECT people.id FROM people  WHERE people.email=? AND  AND people.id=? AND  AND people.family_id=?
csize2: 4
base = Person
	components = 	((Person.email) = ?) \
	((Person.id) = ?) \
	((Person.family_id) = ?)

###fields###
raw_query = Person.undeleted.where(email: email, api_key: api_key).first
csize1: 4
sql1 :  WHERE people.email=? AND people.api_key=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.email=? AND people.api_key=? LIMIT 1
csize2: 7
base = Person
	components = 	((Person.email) = ?) \
	((Person.api_key) = ?) \
	return_limit(1) \
	(Person.id) \
	(Person.email) \
	(Person.api_key)

###fields###
raw_query = Person.undeleted.where(email: params[:email].downcase).first
csize1: 3
sql1 :  WHERE people.email=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.email=? LIMIT 1
csize2: 5
base = Person
	components = 	((Person.email) = ?) \
	return_limit(1) \
	(Person.email) \
	(Person.id)

###fields###
raw_query = Person.undeleted.where(feed_code: params[:code], deleted: false).first
csize1: 4
sql1 :  WHERE people.feed_code=? AND people.deleted=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.feed_code=? AND people.deleted=? LIMIT 1
csize2: 7
base = Person
	components = 	((Person.feed_code) = ?) \
	((Person.deleted) = ?) \
	return_limit(1) \
	(Person.id) \
	(Person.feed_code) \
	(Person.deleted)

###fields###
raw_query = Person.where("admin_id is not null").order(@order).includes(:admin)
csize1: 3
sql1 :  WHERE admin_id is not null  LEFT OUTER JOIN admins ON admins.id = people.admin_id
sql2 : SELECT people.id FROM people  WHERE admin_id is not null  LEFT OUTER JOIN admins ON admins.id = people.admin_id
csize2: 3
base = Person
	components = 	(people.admin_id) \
	(Person.id) \
	includes(Person.admin)

###fields###
raw_query = Person.where("lower(alternate_email) = ?", email.from.first.downcase).first
csize1: 3
sql1 :  WHERE lower(alternate_email) = ? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE lower(alternate_email) = ? LIMIT 1
csize2: 5
base = Person
	components = 	(Person.id) \
	(people.alternate_email) \
	return_limit(1) \
	(Person.id) \
	(people.alternate_email)

###fields###
raw_query = Person.where("lower(email) = ?", email.from.first.downcase).to_a
csize1: 2
sql1 :  WHERE lower(email) = ?
sql2 : SELECT people.id FROM people  WHERE lower(email) = ?
csize2: 4
base = Person
	components = 	(Person.id) \
	(people.email) \
	(Person.id) \
	(people.email)

###fields###
raw_query = Person.where(:provider => auth["provider"], :uid => auth["uid"].to_s).first
csize1: 3
sql1 :  WHERE people.provider=? AND people.uid=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.provider=? AND people.uid=? LIMIT 1
csize2: 6
base = Person
	components = 	((Person.provider) = ?) \
	((Person.uid) = ?) \
	return_limit(1) \
	(Person.id) \
	(Person.provider) \
	(Person.uid)

###fields###
raw_query = Person.where(criteria)
csize1: 0
sql1 :  WHERE 
sql2 : SELECT people.id FROM people  WHERE 
csize2: 0
base = Person
	components = 

raw_query = Person.where(email: email).first
csize1: 2
sql1 :  WHERE people.email=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.email=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.email) = ?) \
	return_limit(1) \
	(Person.email) \
	(Person.id)

###fields###
raw_query = Person.where(email_changed: true, deleted: false).order("last_name, first_name")
csize1: 8
sql1 :  WHERE people.email_changed=? AND people.deleted=? ORDER BY people.first_name
sql2 : SELECT people.id FROM people  WHERE people.email_changed=? AND people.deleted=? ORDER BY people.first_name
csize2: 12
base = Person
	components = 	((Person.email_changed) = ?) \
	((Person.deleted) = ?) \
	(Person.id) \
	(people.last_name) \
	(people.first_name) \
	order(Person.id) \
	order(people.last_name) \
	order(people.first_name) \
	(Person.id) \
	(Person.first_name) \
	(Person.email_changed) \
	(Person.deleted)

###fields###
raw_query = Person.where(feed_code: feed_code).any?
csize1: 1
sql1 :  WHERE people.feed_code=?
sql2 : SELECT people.id FROM people  WHERE people.feed_code=?
csize2: 3
base = Person
	components = 	((Person.feed_code) = ?) \
	(Person.feed_code) \
	(Person.id)

###fields###
raw_query = Person.where(id: id).first
csize1: 2
sql1 :  WHERE people.id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.id=? LIMIT 1
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	return_limit(1) \
	(Person.id)

###fields###
raw_query = Person.where(id: id).first
csize1: 2
sql1 :  WHERE people.id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.id=? LIMIT 1
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	return_limit(1) \
	(Person.id)

###fields###
raw_query = Person.where(id: member_ids).where.not(email: nil)
csize1: 2
sql1 :  WHERE people.id=? AND  AND people.email=?
sql2 : SELECT people.id FROM people  WHERE people.id=? AND  AND people.email=?
csize2: 2
base = Person
	components = 	((Person.id) = ?) \
	((Person.email) = ?)

###fields###
raw_query = Person.where(id: params[:id]).includes(:family).first
csize1: 3
sql1 :  WHERE people.id=?  LEFT OUTER JOIN families ON families.id = people.family_id LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.id=?  LEFT OUTER JOIN families ON families.id = people.family_id LIMIT 1
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	includes(Person.family) \
	return_limit(1)

###fields###
raw_query = Person.where(legacy_id: params[:id]).includes(:family).first
csize1: 3
sql1 :  WHERE people.legacy_id=?  LEFT OUTER JOIN families ON families.id = people.family_id LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.legacy_id=?  LEFT OUTER JOIN families ON families.id = people.family_id LIMIT 1
csize2: 3
base = Person
	components = 	((Person.legacy_id) = ?) \
	includes(Person.family) \
	return_limit(1)

###fields###
raw_query = Person.where(mobile_phone: mobile_phone.digits_only).first
csize1: 2
sql1 :  WHERE people.mobile_phone=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.mobile_phone=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.mobile_phone) = ?) \
	return_limit(1) \
	(Person.mobile_phone) \
	(Person.id)

###fields###
raw_query = Person.where(q.join(" or "), *p)
csize1: 0
sql1 :  WHERE 
sql2 : SELECT people.id FROM people  WHERE 
csize2: 0
base = Person
	components = 

raw_query = ProcessedMessage.where(header_message_id: email.message_id).any?
csize1: 1
sql1 :  WHERE processed_messages.header_message_id=?
sql2 : SELECT processed_messages.id FROM processed_messages  WHERE processed_messages.header_message_id=?
csize2: 3
base = ProcessedMessage
	components = 	((ProcessedMessage.header_message_id) = ?) \
	(ProcessedMessage.header_message_id) \
	(ProcessedMessage.id)

###fields###
raw_query = Relationship.create(person: @family.people.find(person_id), related: @family.people.find(related_id), name: relationship)
csize1: 0
sql1 : 
sql2 : SELECT relationships.id FROM relationships 
csize2: 1
base = Relationship
	query cannot be handled

raw_query = Relationship.where("id = ? and (person_id = ? or related_id = ?)", id, @person.id, @person.id).first
csize1: 5
sql1 :  WHERE id = ? and (person_id = ? or related_id = ?) LIMIT 1
sql2 : SELECT relationships.id FROM relationships  WHERE id = ? and (person_id = ? or related_id = ?) LIMIT 1
csize2: 9
base = Relationship
	components = 	(Relationship.id) \
	(relationships.id) \
	(relationships.person_id) \
	(relationships.related_id) \
	return_limit(1) \
	(Relationship.id) \
	(relationships.id) \
	(relationships.person_id) \
	(relationships.related_id)

###fields###
raw_query = Relationship.where("person_id = ? and other_name like ?", person_id, "%Check-in Person%").map(&:related).uniq
csize1: 5
sql1 :  WHERE person_id = ? and other_name like ?
sql2 : SELECT relationships.id FROM relationships  WHERE person_id = ? and other_name like ?
csize2: 8
base = Relationship
	components = 	(Relationship.id) \
	(relationships.person_id) \
	(relationships.other_name) \
	(Relationship.related) \
	distinct() \
	(Relationship.id) \
	(relationships.person_id) \
	(relationships.other_name)

###fields###
raw_query = Relationship.where("person_id in (?) and related_id in (?)", people_ids, people_ids)
csize1: 3
sql1 :  WHERE person_id in (?) and related_id in (?)
sql2 : SELECT relationships.id FROM relationships  WHERE person_id in (?) and related_id in (?)
csize2: 6
base = Relationship
	components = 	(Relationship.id) \
	(relationships.person_id) \
	(relationships.related_id) \
	(Relationship.id) \
	(relationships.person_id) \
	(relationships.related_id)

###fields###
raw_query = Relationship.where("related_id in (?) and other_name like '%Check-in Person%'", @people.map(&:id)).map(&:person).uniq
csize1: 5
sql1 :  WHERE related_id in (?) and other_name like '%Check-in Person%'
sql2 : SELECT relationships.id FROM relationships  WHERE related_id in (?) and other_name like '%Check-in Person%'
csize2: 8
base = Relationship
	components = 	(Relationship.id) \
	(relationships.related_id) \
	(relationships.other_name) \
	(Relationship.person) \
	distinct() \
	(Relationship.id) \
	(relationships.related_id) \
	(relationships.other_name)

###fields###
raw_query = Search.new_from_params(:family_name => params[:q])
csize1: 1
sql1 : 
sql2 : SELECT searches.id FROM searches 
csize2: 2
base = Search
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="family_name", ruby_meth=nil> family_name
raw_query = Setting.get(:features, :groups)
csize1: 2
sql1 : 
sql2 : SELECT settings.id FROM settings 
csize2: 3
base = Setting
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Setting", column="features", ruby_meth=nil> features
field doesn't exist #<struct QueryColumn table="Setting", column="groups", ruby_meth=nil> groups
raw_query = Setting.get(:features, :small_group_size)
csize1: 2
sql1 : 
sql2 : SELECT settings.id FROM settings 
csize2: 3
base = Setting
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Setting", column="features", ruby_meth=nil> features
field doesn't exist #<struct QueryColumn table="Setting", column="small_group_size", ruby_meth=nil> small_group_size
raw_query = Setting.where(global: true).to_a
csize1: 1
sql1 :  WHERE settings.global=?
sql2 : SELECT settings.id FROM settings  WHERE settings.global=?
csize2: 3
base = Setting
	components = 	((Setting.global) = ?) \
	(Setting.global) \
	(Setting.id)

###fields###
raw_query = Setting.where(hidden: false).where("site_id = ? or global = ?", Site.current.id, true).order("section, name")
csize1: 10
sql1 :  WHERE settings.hidden=? AND site_id = ? or global = ? ORDER BY settings.name
sql2 : SELECT settings.id FROM settings  WHERE settings.hidden=? AND site_id = ? or global = ? ORDER BY settings.name
csize2: 15
base = Setting
	components = 	((Setting.hidden) = ?) \
	(Setting.id) \
	(settings.site_id) \
	(settings.global) \
	(Setting.id) \
	(settings.section) \
	(settings.name) \
	order(Setting.id) \
	order(settings.section) \
	order(settings.name) \
	(Setting.id) \
	(Setting.name) \
	(settings.global) \
	(Setting.hidden) \
	(settings.site_id)

###fields###
raw_query = Setting.where(site_id: site.id).to_a
csize1: 1
sql1 :  WHERE settings.site_id=?
sql2 : SELECT settings.id FROM settings  WHERE settings.site_id=?
csize2: 3
base = Setting
	components = 	((Setting.site_id) = ?) \
	(Setting.site_id) \
	(Setting.id)

###fields###
raw_query = Site.find(id)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT sites.id FROM sites  WHERE id = ?
csize2: 3
base = Site
	components = 	((Site.id) = ?) \
	(sites.id) \
	(Site.id)

###fields###
raw_query = Site.where(active: true).each
csize1: 1
sql1 :  WHERE sites.active=?
sql2 : SELECT sites.id FROM sites  WHERE sites.active=?
csize2: 3
base = Site
	components = 	((Site.active) = ?) \
	(Site.active) \
	(Site.id)

###fields###
raw_query = Site.where(active: true).each
csize1: 1
sql1 :  WHERE sites.active=?
sql2 : SELECT sites.id FROM sites  WHERE sites.active=?
csize2: 3
base = Site
	components = 	((Site.active) = ?) \
	(Site.active) \
	(Site.id)

###fields###
raw_query = Site.where(email_host: address.downcase.split("@").last).first
csize1: 2
sql1 :  WHERE sites.email_host=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.email_host=? LIMIT 1
csize2: 4
base = Site
	components = 	((Site.email_host) = ?) \
	return_limit(1) \
	(Site.email_host) \
	(Site.id)

###fields###
raw_query = Site.where(host: address.downcase.split("@").last).first
csize1: 2
sql1 :  WHERE sites.host=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.host=? LIMIT 1
csize2: 4
base = Site
	components = 	((Site.host) = ?) \
	return_limit(1) \
	(Site.host) \
	(Site.id)

###fields###
raw_query = Site.where(host: request.host, active: true).first
csize1: 3
sql1 :  WHERE sites.host=? AND sites.active=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.host=? AND sites.active=? LIMIT 1
csize2: 6
base = Site
	components = 	((Site.host) = ?) \
	((Site.active) = ?) \
	return_limit(1) \
	(Site.id) \
	(Site.host) \
	(Site.active)

###fields###
raw_query = Site.where(id: 1).first
csize1: 2
sql1 :  WHERE sites.id=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.id=? LIMIT 1
csize2: 3
base = Site
	components = 	((Site.id) = ?) \
	return_limit(1) \
	(Site.id)

###fields###
raw_query = Site.where(id: ENV["ONEBODY_SITE"], active: true).first
csize1: 3
sql1 :  WHERE sites.id=? AND sites.active=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.id=? AND sites.active=? LIMIT 1
csize2: 5
base = Site
	components = 	((Site.id) = ?) \
	((Site.active) = ?) \
	return_limit(1) \
	(Site.id) \
	(Site.active)

###fields###
raw_query = Site.where(secondary_host: request.host, active: true).first
csize1: 3
sql1 :  WHERE sites.secondary_host=? AND sites.active=? LIMIT 1
sql2 : SELECT sites.id FROM sites  WHERE sites.secondary_host=? AND sites.active=? LIMIT 1
csize2: 6
base = Site
	components = 	((Site.secondary_host) = ?) \
	((Site.active) = ?) \
	return_limit(1) \
	(Site.id) \
	(Site.secondary_host) \
	(Site.active)

###fields###
raw_query = StreamItem.create!(streamable_type: "StreamItemGroup", context: { streamable_type: @base_item.streamable_type }, items: grouper.grouped, created_at: created_at, shared: true, is_public: true)
csize1: 0
sql1 : 
sql2 : SELECT stream_items.id FROM stream_items 
csize2: 1
base = StreamItem
	query cannot be handled

raw_query = StreamItem.create!(title: album.name, context: { "picture_ids" => [[id, photo.fingerprint, photo_extension]] }, person_id: person_id, group_id: "Group" === album.owner_type ? album.owner_id : nil, streamable_type: "Album", streamable_id: album_id, created_at: created_at, shared: !!(
album.group || person.share_activity?), is_public: album.is_public?)
csize1: 0
sql1 : 
sql2 : SELECT stream_items.id FROM stream_items 
csize2: 1
base = StreamItem
	query cannot be handled

raw_query = StreamItem.create!(title: name, body: body, person_id: person_id, group_id: group_id, streamable_type: "PrayerRequest", streamable_id: id, created_at: created_at, shared: !!group)
csize1: 0
sql1 : 
sql2 : SELECT stream_items.id FROM stream_items 
csize2: 1
base = StreamItem
	query cannot be handled

raw_query = StreamItem.create!(title: subject, body: html_body.present? ? html_body : body, text: !html_body.present?, person_id: person_id, group_id: group_id, streamable_type: "Message", streamable_id: id, created_at: created_at, shared: !!group)
csize1: 0
sql1 : 
sql2 : SELECT stream_items.id FROM stream_items 
csize2: 1
base = StreamItem
	query cannot be handled

raw_query = StreamItem.order(:id).where(streamable_type: @base_item.streamable_type).where("created_at >= ?", @base_item.created_at - GROUPING_PERIOD)
csize1: 5
sql1 :  ORDER BY StreamItem.id WHERE stream_items.streamable_type=? AND created_at >= ?
sql2 : SELECT stream_items.id FROM stream_items  ORDER BY StreamItem.id WHERE stream_items.streamable_type=? AND created_at >= ?
csize2: 5
base = StreamItem
	components = 	(StreamItem.id) \
	order(StreamItem.id) \
	((StreamItem.streamable_type) = ?) \
	(stream_items.created_at) \
	(StreamItem.id)

###fields###
raw_query = StreamItem.shared_with(@logged_in).where(group: @group).paginate(page: params[:timeline_page], per_page: 5)
csize1: 1
sql1 :  WHERE stream_items.group=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.group=?
csize2: 3
base = StreamItem
	components = 	((StreamItem.group) = ?) \
	(StreamItem.group) \
	(StreamItem.id)

###fields###
raw_query = StreamItem.shared_with(@logged_in).where(person_id: @person.id).paginate(page: params[:timeline_page], per_page: 5)
csize1: 1
sql1 :  WHERE stream_items.person_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.person_id=?
csize2: 3
base = StreamItem
	components = 	((StreamItem.person_id) = ?) \
	(StreamItem.person_id) \
	(StreamItem.id)

###fields###
raw_query = StreamItem.shared_with(person).where("stream_items.created_at > ?", person.last_seen_stream_item.try(:created_at) || Time.now).count("distinct stream_items.id")
csize1: 2
sql1 :  WHERE stream_items.created_at > ?distinct stream_items.id
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.created_at > ?distinct stream_items.id
csize2: 2
base = StreamItem
	components = 	(StreamItem.created_at) \
	(StreamItem.id)

###fields###
raw_query = StreamItem.where(person_id: person_id).order("id").last
csize1: 6
sql1 :  WHERE stream_items.person_id=? ORDER BY stream_items.id LIMIT 1
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.person_id=? ORDER BY stream_items.id LIMIT 1
csize2: 8
base = StreamItem
	components = 	((StreamItem.person_id) = ?) \
	(StreamItem.id) \
	(stream_items.id) \
	order(StreamItem.id) \
	order(stream_items.id) \
	return_limit(1) \
	(StreamItem.person_id) \
	(StreamItem.id)

###fields###
raw_query = StreamItem.where(streamable_type: "Album", streamable_id: album_id).each
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = StreamItem.where(streamable_type: "Album", streamable_id: album_id).each
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = StreamItem.where(streamable_type: "Message", streamable_id: id).each
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = StreamItem.where(streamable_type: "NewsItem", streamable_id: id).each
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = StreamItem.where(streamable_type: "PrayerRequest", streamable_id: id).each
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = StreamItem.where(streamable_type: "StreamItemGroup").find(params[:stream_item_group_id])
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND id = ?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND id = ?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(stream_items.id)

###fields###
raw_query = StreamItem.where(streamable_type: streamable_type, streamable_id: streamable_id).to_a
csize1: 2
sql1 :  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=? AND stream_items.streamable_id=?
csize2: 5
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	((StreamItem.streamable_id) = ?) \
	(StreamItem.id) \
	(StreamItem.streamable_type) \
	(StreamItem.streamable_id)

###fields###
raw_query = Tag.find(params[:id])
query = Tag.find(params[:id]) [{:method=>"Tag", :class=>"Tag", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadf83f0>, :class=>"Tag", :class_name=>""}, {:method=>"find", :class=>"Tag", :class_name=>""}, {:method=>"find", :class=>"Tag", :class_name=>""}]
Table Tag does not exist!

raw_query = Tag.find_by!(name: params[:id])
query = Tag.find_by!(name: params[:id]) [{:method=>"Tag", :class=>"Tag", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadf8210>, :class=>"Tag", :class_name=>""}, {:method=>"find_by!", :class=>"Tag", :class_name=>""}, {:method=>"find_by!", :class=>"Tag", :class_name=>""}]
Table Tag does not exist!

raw_query = Task.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT tasks.id FROM tasks  WHERE id = ?
csize2: 3
base = Task
	components = 	((Task.id) = ?) \
	(tasks.id) \
	(Task.id)

###fields###
raw_query = Task.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT tasks.id FROM tasks  WHERE id = ?
csize2: 3
base = Task
	components = 	((Task.id) = ?) \
	(tasks.id) \
	(Task.id)

###fields###
raw_query = Update.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT updates.id FROM updates  WHERE id = ?
csize2: 3
base = Update
	components = 	((Update.id) = ?) \
	(updates.id) \
	(Update.id)

###fields###
raw_query = Update.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT updates.id FROM updates  WHERE id = ?
csize2: 3
base = Update
	components = 	((Update.id) = ?) \
	(updates.id) \
	(Update.id)

###fields###
raw_query = Verification.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT verifications.id FROM verifications  WHERE id = ?
csize2: 3
base = Verification
	components = 	((Verification.id) = ?) \
	(verifications.id) \
	(Verification.id)

###fields###
raw_query = Verification.where(criteria(:for_verification)).where("created_at > ?", 1.day.ago).count
csize1: 2
sql1 :  WHERE  AND created_at > ?
sql2 : SELECT verifications.id FROM verifications  WHERE  AND created_at > ?
csize2: 2
base = Verification
	components = 	(verifications.created_at) \
	(Verification.id)

###fields###
raw_query = Verse.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT verses.id FROM verses  WHERE id = ?
csize2: 3
base = Verse
	components = 	((Verse.id) = ?) \
	(verses.id) \
	(Verse.id)

###fields###
raw_query = Verse.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT verses.id FROM verses  WHERE id = ?
csize2: 3
base = Verse
	components = 	((Verse.id) = ?) \
	(verses.id) \
	(Verse.id)

###fields###
raw_query = Verse.find(params[:id])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT verses.id FROM verses  WHERE id = ?
csize2: 3
base = Verse
	components = 	((Verse.id) = ?) \
	(verses.id) \
	(Verse.id)

###fields###
raw_query = Verse.find(params[:q])
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT verses.id FROM verses  WHERE id = ?
csize2: 3
base = Verse
	components = 	((Verse.id) = ?) \
	(verses.id) \
	(Verse.id)

###fields###
raw_query = Verse.order(:book, :chapter, :verse).with_people_count.page(params[:page])
csize1: 7
sql1 :  ORDER BY Verse.verse
sql2 : SELECT verses.id FROM verses  ORDER BY Verse.verse
csize2: 9
base = Verse
	components = 	(Verse.book) \
	(Verse.chapter) \
	(Verse.verse) \
	order(Verse.book) \
	order(Verse.chapter) \
	order(Verse.verse) \
	(Verse.id) \
	(Verse.verse)

###fields###
raw_query = Verse.tag_counts(conditions: ["verses.id in (?)", @verses.map(&:id) || [0]], order: "name")
csize1: 0
sql1 : 
sql2 : SELECT verses.id FROM verses 
csize2: 1
base = Verse
	query cannot be handled

raw_query = Verse.tag_counts(order: "name")
csize1: 0
sql1 : 
sql2 : SELECT verses.id FROM verses 
csize2: 1
base = Verse
	query cannot be handled

raw_query = adults.take(2)
query = adults.take(2) [{:method=>"adults", :class=>"Adult", :class_name=>""}, {:method=>"take", :class=>"Adult", :class_name=>""}, {:method=>"take", :class=>"Adult", :class_name=>""}]
Table Adult does not exist!

raw_query = album.pictures.order(:id).first
csize1: 4
sql1 :   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id LIMIT 1
sql2 : SELECT albums.id FROM albums   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id LIMIT 1
csize2: 7
base = Album
	components = 	((Picture.album_id) = ?) \
	(Picture.id) \
	order(Picture.id) \
	return_limit(1) \
	(Album.id) \
	(Picture.id) \
	(Picture.album_id)

###fields###
raw_query = album.pictures.order(:id).last
csize1: 4
sql1 :   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id LIMIT 1
sql2 : SELECT albums.id FROM albums   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id LIMIT 1
csize2: 7
base = Album
	components = 	((Picture.album_id) = ?) \
	(Picture.id) \
	order(Picture.id) \
	return_limit(1) \
	(Album.id) \
	(Picture.id) \
	(Picture.album_id)

###fields###
raw_query = album.pictures.order(:id).where("id < ?", id).last
csize1: 6
sql1 :   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id WHERE id < ? LIMIT 1
sql2 : SELECT albums.id FROM albums   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id WHERE id < ? LIMIT 1
csize2: 6
base = Album
	components = 	((Picture.album_id) = ?) \
	(Picture.id) \
	order(Picture.id) \
	(pictures.id) \
	(Picture.id) \
	return_limit(1)

###fields###
raw_query = album.pictures.order(:id).where("id > ?", id).first
csize1: 6
sql1 :   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id WHERE id > ? LIMIT 1
sql2 : SELECT albums.id FROM albums   LEFT OUTER JOIN pictures ON albums.id = pictures.album_id ORDER BY Picture.id WHERE id > ? LIMIT 1
csize2: 6
base = Album
	components = 	((Picture.album_id) = ?) \
	(Picture.id) \
	order(Picture.id) \
	(pictures.id) \
	(Picture.id) \
	return_limit(1)

###fields###
raw_query = albums.where(name: params[:album].presence).first_or_create!
csize1: 1
sql1 :  WHERE albums.name=?
sql2 : SELECT albums.id FROM albums  WHERE albums.name=?
csize2: 3
base = Album
	components = 	((Album.name) = ?) \
	(Album.name) \
	(Album.id)

###fields###
raw_query = alternates.first
query = alternates.first [{:method=>"alternates", :class=>"Alternate", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae101f8>, :class=>"Alternate", :class_name=>""}, {:method=>"first", :class=>"Alternate", :class_name=>""}]
Table Alternate does not exist!

raw_query = alternates.first
query = alternates.first [{:method=>"alternates", :class=>"Alternate", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae0bf68>, :class=>"Alternate", :class_name=>""}, {:method=>"first", :class=>"Alternate", :class_name=>""}]
Table Alternate does not exist!

raw_query = alternates.first
query = alternates.first [{:method=>"alternates", :class=>"Alternate", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae0bd38>, :class=>"Alternate", :class_name=>""}, {:method=>"first", :class=>"Alternate", :class_name=>""}]
Table Alternate does not exist!

raw_query = args.first
query = args.first [{:method=>"args", :class=>"Arg", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3bd8>, :class=>"Arg", :class_name=>""}, {:method=>"first", :class=>"Arg", :class_name=>""}]
Table Arg does not exist!

raw_query = args.last
query = args.last [{:method=>"args", :class=>"Arg", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3980>, :class=>"Arg", :class_name=>""}, {:method=>"last", :class=>"Arg", :class_name=>""}]
Table Arg does not exist!

raw_query = attendance_records.find_by_sql("select distinct attended_at from attendance_records where group_id = #{
id} and site_id = #{
Site.current.id} order by attended_at desc").map
csize1: 3
sql1 :  select distinct attended_at from attendance_records where group_id = ?  and site_id = ?  order by attended_at desc
sql2 : SELECT attendance_records.id FROM attendance_records  select distinct attended_at from attendance_records where group_id = ?  and site_id = ?  order by attended_at desc
csize2: 3
base = AttendanceRecord
	components = 	(attendance_records.attended_at) \
	(attendance_records.group_id) \
	(attendance_records.site_id)

###fields###
raw_query = attendance_records.on_date(Date.today).includes(:group).order(:attended_at)
csize1: 4
sql1 :   LEFT OUTER JOIN groups ON groups.id = attendance_records.group_id ORDER BY AttendanceRecord.attended_at
sql2 : SELECT attendance_records.id FROM attendance_records   LEFT OUTER JOIN groups ON groups.id = attendance_records.group_id ORDER BY AttendanceRecord.attended_at
csize2: 8
base = AttendanceRecord
	components = 	includes(AttendanceRecord.group) \
	(AttendanceRecord.attended_at) \
	order(AttendanceRecord.attended_at) \
	(AttendanceRecord.id) \
	(Attendancerecord.attended_at) \
	(Group.id) \
	(AttendanceRecord.group_id)

###fields###
t is null #<struct QueryColumn table="Attendancerecord", column="attended_at", ruby_meth=nil>
raw_query = attendance_records.where("attended_at between ? and ?", date.strftime("%Y-%m-%d 0:00"), date.strftime("%Y-%m-%d 23:59:59"))
csize1: 2
sql1 :  WHERE attended_at between ? and ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE attended_at between ? and ?
csize2: 4
base = AttendanceRecord
	components = 	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id)

###fields###
raw_query = attributes(row).select
query = attributes(row).select [{:method=>".select", :class=>"Attributes", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae19370>, :class=>"Attributes", :class_name=>""}, {:method=>"select", :class=>"Attributes", :class_name=>""}]
Table Attributes does not exist!

raw_query = attributes(row).select
query = attributes(row).select [{:method=>".select", :class=>"Attributes", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae191b8>, :class=>"Attributes", :class_name=>""}, {:method=>"select", :class=>"Attributes", :class_name=>""}]
Table Attributes does not exist!

raw_query = by_group.first
query = by_group.first [{:method=>"by_group", :class=>"ByGroup", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae39f80>, :class=>"ByGroup", :class_name=>""}, {:method=>"first", :class=>"ByGroup", :class_name=>""}]
Table ByGroup does not exist!

raw_query = by_name.first
query = by_name.first [{:method=>"by_name", :class=>"ByName", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae3a1b0>, :class=>"ByName", :class_name=>""}, {:method=>"first", :class=>"ByName", :class_name=>""}]
Table ByName does not exist!

raw_query = by_primary.first
query = by_primary.first [{:method=>"by_primary", :class=>"ByPrimary", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae3acf0>, :class=>"ByPrimary", :class_name=>""}, {:method=>"first", :class=>"ByPrimary", :class_name=>""}]
Table ByPrimary does not exist!

raw_query = checkin_time.entries.select { |e|
  
  e.sequence >= sequence
}.each_with_index
csize1: 0
sql1 : 
sql2 : SELECT checkin_times.id FROM checkin_times 
csize2: 1
base = CheckinTime
	query cannot be handled

raw_query = children.where(published: true, navigation: true)
query = children.where(published: true, navigation: true) [{:method=>"children", :class=>"Child", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae52490>, :class=>"Child", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae52440>, :class=>"Child", :class_name=>""}, {:method=>"where", :class=>"Child", :class_name=>""}, {:method=>"where", :class=>"Child", :class_name=>""}]
Table Child does not exist!

raw_query = classes.to_s.split(",").grep(/\AAG:/).first
query = classes.to_s.split(",").grep(/\AAG:/).first [{:method=>"classes", :class=>"Class", :class_name=>""}, {:method=>"to_s", :class=>"Class", :class_name=>""}, {:method=>"split", :class=>"Class", :class_name=>""}, {:method=>"grep", :class=>"Class", :class_name=>""}, {:method=>"first", :class=>"Class", :class_name=>""}]
Table Class does not exist!

raw_query = columns.map { |c|
  
  c.name
}.select
query = columns.map { |c|
  
  c.name
}.select [{:method=>"columns", :class=>"Column", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae71908>, :class=>"Column", :class_name=>""}, {:method=>"name", :class=>"Column", :class_name=>""}, {:method=>"map", :class=>"Column", :class_name=>""}, {:method=>"select", :class=>"Column", :class_name=>""}]
Table Column does not exist!

raw_query = dates.first
query = dates.first [{:method=>"dates", :class=>"Date", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae614e0>, :class=>"Date", :class_name=>""}, {:method=>"first", :class=>"Date", :class_name=>""}]
Table Date does not exist!

raw_query = dates.first
query = dates.first [{:method=>"dates", :class=>"Date", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae61710>, :class=>"Date", :class_name=>""}, {:method=>"first", :class=>"Date", :class_name=>""}]
Table Date does not exist!

raw_query = email.content_type.downcase.split(";").first
query = email.content_type.downcase.split(";").first [{:method=>"email", :class=>"Email", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae39968>, :class=>"Email", :class_name=>""}, {:method=>"content_type", :class=>"Email", :class_name=>""}, {:method=>"downcase", :class=>"Email", :class_name=>""}, {:method=>"split", :class=>"Email", :class_name=>""}, {:method=>"first", :class=>"Email", :class_name=>""}]
Table Email does not exist!

raw_query = email.from
query = email.from [{:method=>"email", :class=>"Email", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae41bb8>, :class=>"Email", :class_name=>""}, {:method=>"from", :class=>"Email", :class_name=>""}]
Table Email does not exist!

raw_query = email.from
query = email.from [{:method=>"email", :class=>"Email", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae41758>, :class=>"Email", :class_name=>""}, {:method=>"from", :class=>"Email", :class_name=>""}]
Table Email does not exist!

raw_query = email.header["from"].value.to_s.downcase.split.first
query = email.header["from"].value.to_s.downcase.split.first [{:method=>"email.header[from]", :class=>"Header[from]", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae3aac0>, :class=>"Header[from]", :class_name=>""}, {:method=>"header", :class=>"Header[from]", :class_name=>""}, {:method=>"value", :class=>"Header[from]", :class_name=>""}, {:method=>"to_s", :class=>"Header[from]", :class_name=>""}, {:method=>"downcase", :class=>"Header[from]", :class_name=>""}, {:method=>"split", :class=>"Header[from]", :class_name=>""}, {:method=>"first", :class=>"Header[from]", :class_name=>""}]
Table Header[from] does not exist!

raw_query = families.where("lower(address1) = ?", hash["family_address1"].downcase).where("lower(city)     = ?", hash["family_city"].downcase).where("lower(state)    = ?", hash["family_state"].downcase).where("lower(zip)      = ?", hash["family_zip"].downcase).first
csize1: 9
sql1 :  WHERE lower(address1) = ? AND lower(city)     = ? AND lower(state)    = ? AND lower(zip)      = ? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE lower(address1) = ? AND lower(city)     = ? AND lower(state)    = ? AND lower(zip)      = ? LIMIT 1
csize2: 14
base = Family
	components = 	(Family.id) \
	(families.address1) \
	(Family.id) \
	(families.city) \
	(Family.id) \
	(families.state) \
	(Family.id) \
	(families.zip) \
	return_limit(1) \
	(Family.id) \
	(families.address1) \
	(families.city) \
	(families.state) \
	(families.zip)

###fields###
raw_query = families.where(home_phone: hash["family_home_phone"].digits_only).first
csize1: 2
sql1 :  WHERE families.home_phone=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.home_phone=? LIMIT 1
csize2: 4
base = Family
	components = 	((Family.home_phone) = ?) \
	return_limit(1) \
	(Family.home_phone) \
	(Family.id)

###fields###
raw_query = families.where(id: hash["family_id"]).first
csize1: 2
sql1 :  WHERE families.id=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.id=? LIMIT 1
csize2: 3
base = Family
	components = 	((Family.id) = ?) \
	return_limit(1) \
	(Family.id)

###fields###
raw_query = families.where(legacy_id: legacy_id).first
csize1: 2
sql1 :  WHERE families.legacy_id=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.legacy_id=? LIMIT 1
csize2: 4
base = Family
	components = 	((Family.legacy_id) = ?) \
	return_limit(1) \
	(Family.legacy_id) \
	(Family.id)

###fields###
raw_query = families.where(name: hash["family_name"]).first
csize1: 2
sql1 :  WHERE families.name=? LIMIT 1
sql2 : SELECT families.id FROM families  WHERE families.name=? LIMIT 1
csize2: 4
base = Family
	components = 	((Family.name) = ?) \
	return_limit(1) \
	(Family.name) \
	(Family.id)

###fields###
raw_query = family.last_name
csize1: 1
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 2
base = Family
	query cannot be handled

###fields###
raw_query = family.last_name
csize1: 1
sql1 : 
sql2 : SELECT families.id FROM families 
csize2: 2
base = Family
	query cannot be handled

###fields###
raw_query = family.name.split.last
csize1: 2
sql1 :  LIMIT 1
sql2 : SELECT families.id FROM families  LIMIT 1
csize2: 3
base = Family
	components = 	select(Family.name) \
	return_limit(1) \
	(Family.id)

###fields###
raw_query = family.people.undeleted.first.photo.presence.try(:path, :large)
csize1: 7
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id LIMIT 1
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id LIMIT 1
csize2: 9
base = Family
	components = 	((Person.family_id) = ?) \
	return_limit(1) \
	(Person.path) \
	(Person.large) \
	select(Person.path) \
	select(Person.large) \
	(Family.id) \
	(Person.family_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="path", ruby_meth=nil> path
field doesn't exist #<struct QueryColumn table="Person", column="large", ruby_meth=nil> large
field doesn't exist #<struct QueryColumn table="Person", column="path", ruby_meth="select"> path
field doesn't exist #<struct QueryColumn table="Person", column="large", ruby_meth="select"> large
raw_query = family.people.undeleted.where(email: email).where.not(id: id)
csize1: 4
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id WHERE people.email=? AND  AND people.id=?
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id WHERE people.email=? AND  AND people.id=?
csize2: 4
base = Family
	components = 	((Person.family_id) = ?) \
	((Person.email) = ?) \
	((Person.id) = ?)

###fields###
raw_query = family.people.undeleted.where(email: email).where.not(id: id).update_all(primary_emailer: false)
csize1: 4
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id WHERE people.email=? AND  AND people.id=?
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id WHERE people.email=? AND  AND people.id=?
csize2: 4
base = Family
	components = 	((Person.family_id) = ?) \
	((Person.email) = ?) \
	((Person.id) = ?)

###fields###
raw_query = family.people.undeleted.where.not(id: id).pluck(:id)
csize1: 5
sql1 :   LEFT OUTER JOIN people ON families.id = people.family_id WHERE  AND people.id=?
sql2 : SELECT families.id FROM families   LEFT OUTER JOIN people ON families.id = people.family_id WHERE  AND people.id=?
csize2: 5
base = Family
	components = 	((Person.family_id) = ?) \
	((Person.id) = ?) \
	(Person.id) \
	select(Person.id)

###fields###
raw_query = filename.split(".").first
query = filename.split(".").first [{:method=>"filename", :class=>"Filename", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae53638>, :class=>"Filename", :class_name=>""}, {:method=>"split", :class=>"Filename", :class_name=>""}, {:method=>"first", :class=>"Filename", :class_name=>""}]
Table Filename does not exist!

raw_query = friends.pluck(:id)
query = friends.pluck(:id) [{:method=>"friends", :class=>"Friend", :class_name=>""}, {:method=>"pluck", :class=>"Friend", :class_name=>""}, {:method=>"pluck", :class=>"Friend", :class_name=>""}]
Table Friend does not exist!

raw_query = friendship_requests.where(from_id: person.id, rejected: true).delete_all
csize1: 2
sql1 :  WHERE friendship_requests.from_id=? AND friendship_requests.rejected=?
sql2 : SELECT friendship_requests.id FROM friendship_requests  WHERE friendship_requests.from_id=? AND friendship_requests.rejected=?
csize2: 5
base = FriendshipRequest
	components = 	((FriendshipRequest.from_id) = ?) \
	((FriendshipRequest.rejected) = ?) \
	(FriendshipRequest.id) \
	(FriendshipRequest.from_id) \
	(FriendshipRequest.rejected)

###fields###
raw_query = group.address.present?
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = group.admin?(@logged_in)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.admin?(person, :exclude_global_admins)
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="exclude_global_admins", ruby_meth=nil> exclude_global_admins
raw_query = group.admins.length
csize1: 1
sql1 :   LEFT OUTER JOIN admins ON groups.id = admins.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN admins ON groups.id = admins.group_id
csize2: 3
base = Group
	components = 	((Admin.group_id) = ?) \
	(Group.id) \
	(Admin.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Admin", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Admin", column="group_id", ruby_meth=nil> group_id
raw_query = group.can_post?(to_person)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.can_send?(@person)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.changed?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.errors.values
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.get_options_for(person).get_email?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.hidden?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.id
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.id
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.id.to_s
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.linked?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.messages.where(subject: email.subject.sub(/^re:\s?/i, "")).order("id desc").first
csize1: 7
sql1 :   LEFT OUTER JOIN messages ON groups.id = messages.group_id WHERE messages.subject=? ORDER BY messages.id LIMIT 1
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN messages ON groups.id = messages.group_id WHERE messages.subject=? ORDER BY messages.id LIMIT 1
csize2: 11
base = Group
	components = 	((Message.group_id) = ?) \
	((Message.subject) = ?) \
	(Message.id) \
	(messages.id) \
	order(Message.id) \
	order(messages.id) \
	return_limit(1) \
	(Message.subject) \
	(Group.id) \
	(Message.id) \
	(Message.group_id)

###fields###
raw_query = group.parents_of?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.people.each
csize1: 1
sql1 :   LEFT OUTER JOIN people ON groups.id = people.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN people ON groups.id = people.group_id
csize2: 3
base = Group
	components = 	((Person.group_id) = ?) \
	(Group.id) \
	(Person.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
raw_query = group.people.each
csize1: 1
sql1 :   LEFT OUTER JOIN people ON groups.id = people.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN people ON groups.id = people.group_id
csize2: 3
base = Group
	components = 	((Person.group_id) = ?) \
	(Group.id) \
	(Person.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
raw_query = group.people.each
csize1: 1
sql1 :   LEFT OUTER JOIN people ON groups.id = people.group_id
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN people ON groups.id = people.group_id
csize2: 3
base = Group
	components = 	((Person.group_id) = ?) \
	(Group.id) \
	(Person.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Person", column="group_id", ruby_meth=nil> group_id
raw_query = group.photo.url(size)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.private?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.save
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.send(c)
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = group.try(:name)
csize1: 2
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 3
base = Group
	query cannot be handled

###fields###
raw_query = group.try(:photo).try(:exists?)
csize1: 4
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 5
base = Group
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="photo", ruby_meth=nil> photo
field doesn't exist #<struct QueryColumn table="Group", column="photo", ruby_meth="select"> photo
field doesn't exist #<struct QueryColumn table="Group", column="exists?", ruby_meth=nil> exists?
field doesn't exist #<struct QueryColumn table="Group", column="exists?", ruby_meth="select"> exists?
raw_query = group_time.group.attendance_records.create!(person_id: person.id, attended_at: attended_at, first_name: person.first_name, last_name: person.last_name, family_name: person.family.try(:name), age: person.age_group, can_pick_up: person.can_pick_up, cannot_pick_up: person.cannot_pick_up, medical_notes: person.medical_notes, checkin_time_id: group_time.checkin_time_id || group_time.checkin_folder.try(:checkin_time_id), label_id: group_time.label_id, print_extra_nametag: group_time.print_extra_nametag?, barcode_id: barcode_id)
csize1: 2
sql1 :   LEFT OUTER JOIN groups ON groups.id = group_times.group_id  LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
sql2 : SELECT group_times.id FROM group_times   LEFT OUTER JOIN groups ON groups.id = group_times.group_id  LEFT OUTER JOIN attendance_records ON groups.id = attendance_records.group_id
csize2: 6
base = GroupTime
	components = 	((Group.id) = ?) \
	((AttendanceRecord.group_id) = ?) \
	(GroupTime.id) \
	(Group.id) \
	(AttendanceRecord.group_id) \
	(GroupTime.group_id)

###fields###
raw_query = group_time.update_attributes(checkin_folder: self, checkin_time: nil, sequence: sequence)
csize1: 0
sql1 : 
sql2 : SELECT group_times.id FROM group_times 
csize2: 1
base = GroupTime
	query cannot be handled

raw_query = group_times.any?
csize1: 0
sql1 : 
sql2 : SELECT group_times.id FROM group_times 
csize2: 1
base = GroupTime
	query cannot be handled

raw_query = group_times.length
csize1: 0
sql1 : 
sql2 : SELECT group_times.id FROM group_times 
csize2: 1
base = GroupTime
	query cannot be handled

raw_query = grouper.exposed_shared.first.created_at
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT groupers.id FROM groupers  LIMIT 1
csize2: 2
base = Grouper
	components = 	return_limit(1) \
	(Grouper.id)

raw_query = grouper.exposed_shared.none?
csize1: 0
sql1 : 
sql2 : SELECT groupers.id FROM groupers 
csize2: 1
base = Grouper
	query cannot be handled

raw_query = grouper.grouped.none?
csize1: 0
sql1 : 
sql2 : SELECT groupers.id FROM groupers 
csize2: 1
base = Grouper
	query cannot be handled

raw_query = groups.active
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = groups.active.where("(select count(*) from memberships where group_id=groups.id) <= #{
size.to_i}")
csize1: 3
sql1 :  WHERE (select count(*) from memberships where group_id=groups.id) <= ? 
sql2 : SELECT groups.id FROM groups  WHERE (select count(*) from memberships where group_id=groups.id) <= ? 
csize2: 5
base = Group
	components = 	(Group.id) \
	(groups.group_id) \
	(Group.id) \
	(groups.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
field doesn't exist #<struct QueryColumn table="Group", column="group_id", ruby_meth=nil> group_id
raw_query = groups.any?
csize1: 0
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 1
base = Group
	query cannot be handled

raw_query = groups.group
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = groups.is_public
csize1: 1
sql1 : 
sql2 : SELECT groups.id FROM groups 
csize2: 2
base = Group
	query cannot be handled

###fields###
raw_query = includes(:group_times).where("group_times.checkin_time_id is not null").order("group_times.ordering")
csize1: 7
sql1 :   LEFT OUTER JOIN group_times ON groups.id = group_times.group_id WHERE group_times.checkin_time_id is not null ORDER BY GroupTime.ordering
sql2 : SELECT groups.id FROM groups   LEFT OUTER JOIN group_times ON groups.id = group_times.group_id WHERE group_times.checkin_time_id is not null ORDER BY GroupTime.ordering
csize2: 11
base = Group
	components = 	includes(Group.group_times) \
	(GroupTime.checkin_time_id) \
	(Group.id) \
	(Group.id) \
	(GroupTime.ordering) \
	order(Group.id) \
	order(GroupTime.ordering) \
	(GroupTime.checkin_time_id) \
	(Group.id) \
	(Grouptime.ordering) \
	(GroupTime.group_id)

###fields###
field doesn't exist #<struct QueryColumn table="Group", column="group_times", ruby_meth="includes"> group_times
field doesn't exist #<struct QueryColumn table="GroupTime", column="ordering", ruby_meth=nil> ordering
field doesn't exist #<struct QueryColumn table="GroupTime", column="ordering", ruby_meth="order"> ordering
t is null #<struct QueryColumn table="Grouptime", column="ordering", ruby_meth=nil>
raw_query = joins("left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id").where("dfg.id is not null")
csize1: 4
sql1 :  left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id WHERE dfg.id is not null
sql2 : SELECT document_folders.id FROM document_folders  left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id WHERE dfg.id is not null
csize2: 7
base = DocumentFolder
	components = 	(DocumentFolder.id) \
	(DocumentFolderGroup.document_folder_id) \
	(Dfg.id) \
	(DocumentFolder.id) \
	(DocumentFolderGroup.id) \
	(DocumentFolder.id) \
	(DocumentFolderGroup.document_folder_id)

###fields###
raw_query = joins("left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id").where("dfg.id is null")
csize1: 4
sql1 :  left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id WHERE dfg.id is null
sql2 : SELECT document_folders.id FROM document_folders  left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id WHERE dfg.id is null
csize2: 7
base = DocumentFolder
	components = 	(DocumentFolder.id) \
	(DocumentFolderGroup.document_folder_id) \
	(Dfg.id) \
	(DocumentFolder.id) \
	(DocumentFolderGroup.id) \
	(DocumentFolder.id) \
	(DocumentFolderGroup.document_folder_id)

###fields###
raw_query = joins(:memberships).where("memberships.group_id in (?)", ids)
query = joins(:memberships).where("memberships.group_id in (?)", ids) [{:method=>"where", :class=>"Sharing", :class_name=>""}]
Table Sharing does not exist!

raw_query = key.to_s.split("_").first
query = key.to_s.split("_").first [{:method=>"key", :class=>"Key", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae438f0>, :class=>"Key", :class_name=>""}, {:method=>"to_s", :class=>"Key", :class_name=>""}, {:method=>"split", :class=>"Key", :class_name=>""}, {:method=>"first", :class=>"Key", :class_name=>""}]
Table Key does not exist!

raw_query = klass.columns.map(&:name).select
query = klass.columns.map(&:name).select [{:method=>"klass", :class=>"Klass", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae1b3a0>, :class=>"Klass", :class_name=>""}, {:method=>"columns", :class=>"Klass", :class_name=>""}, {:method=>"map", :class=>"Klass", :class_name=>""}, {:method=>"select", :class=>"Klass", :class_name=>""}]
Table Klass does not exist!

raw_query = members.first
query = members.first [{:method=>"members", :class=>"Member", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae4b2a8>, :class=>"Member", :class_name=>""}, {:method=>"first", :class=>"Member", :class_name=>""}]
Table Member does not exist!

raw_query = memberships.where(auto: true).destroy_all
csize1: 1
sql1 :  WHERE memberships.auto=?
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.auto=?
csize2: 3
base = Membership
	components = 	((Membership.auto) = ?) \
	(Membership.auto) \
	(Membership.id)

###fields###
raw_query = memberships.where(group_id: group.id).any?
csize1: 1
sql1 :  WHERE memberships.group_id=?
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.group_id=?
csize2: 3
base = Membership
	components = 	((Membership.group_id) = ?) \
	(Membership.group_id) \
	(Membership.id)

###fields###
raw_query = memberships.where(person_id: (
new_people & people).map(&:id)).includes(:person).each
csize1: 2
sql1 :  WHERE memberships.person_id=?  LEFT OUTER JOIN people ON people.id = memberships.person_id
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.person_id=?  LEFT OUTER JOIN people ON people.id = memberships.person_id
csize2: 2
base = Membership
	components = 	((Membership.person_id) = ?) \
	includes(Membership.person)

###fields###
raw_query = memberships.where(person_id: (
people - new_people).map(&:id), auto: true).delete_all
csize1: 2
sql1 :  WHERE memberships.person_id=? AND memberships.auto=?
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.person_id=? AND memberships.auto=?
csize2: 5
base = Membership
	components = 	((Membership.person_id) = ?) \
	((Membership.auto) = ?) \
	(Membership.id) \
	(Membership.person_id) \
	(Membership.auto)

###fields###
raw_query = memberships.where(person_id: person.id).first
csize1: 2
sql1 :  WHERE memberships.person_id=? LIMIT 1
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.person_id=? LIMIT 1
csize2: 4
base = Membership
	components = 	((Membership.person_id) = ?) \
	return_limit(1) \
	(Membership.person_id) \
	(Membership.id)

###fields###
raw_query = memberships.where(person_id: person.id).first.update_attributes!(options)
csize1: 2
sql1 :  WHERE memberships.person_id=? LIMIT 1
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.person_id=? LIMIT 1
csize2: 4
base = Membership
	components = 	((Membership.person_id) = ?) \
	return_limit(1) \
	(Membership.person_id) \
	(Membership.id)

###fields###
raw_query = message.attachments.create(name: File.split(file.original_filename).last, content_type: file.content_type, file: file)
csize1: 1
sql1 :   LEFT OUTER JOIN attachments ON messages.id = attachments.message_id
sql2 : SELECT messages.id FROM messages   LEFT OUTER JOIN attachments ON messages.id = attachments.message_id
csize2: 3
base = Message
	components = 	((Attachment.message_id) = ?) \
	(Message.id) \
	(Attachment.message_id)

###fields###
raw_query = message.send_to_group(already_sent_to)
csize1: 0
sql1 : 
sql2 : SELECT messages.id FROM messages 
csize2: 1
base = Message
	query cannot be handled

raw_query = messages.order(created_at: :desc).page(params[:page])
csize1: 2
sql1 :  ORDER BY Message.created_at
sql2 : SELECT messages.id FROM messages  ORDER BY Message.created_at
csize2: 4
base = Message
	components = 	(Message.created_at) \
	order(Message.created_at) \
	(Message.id) \
	(Message.created_at)

###fields###
raw_query = model.find(params[id_key])
query = model.find(params[id_key]) [{:method=>"model", :class=>"Model", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadeab38>, :class=>"Model", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadeaae8>, :class=>"Model", :class_name=>""}, {:method=>"find", :class=>"Model", :class_name=>""}, {:method=>"find", :class=>"Model", :class_name=>""}]
Table Model does not exist!

raw_query = msg.group
query = msg.group [{:method=>"msg", :class=>"Msg", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae42518>, :class=>"Msg", :class_name=>""}, {:method=>"group", :class=>"Msg", :class_name=>""}]
Table Msg does not exist!

raw_query = object.errors.select
query = object.errors.select [{:method=>"object", :class=>"Object", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae10680>, :class=>"Object", :class_name=>""}, {:method=>"errors", :class=>"Object", :class_name=>""}, {:method=>"select", :class=>"Object", :class_name=>""}]
Table Object does not exist!

raw_query = order("ifnull(month(people.birthday), 99)")
csize1: 4
sql1 :  ORDER BY Person.birthday
sql2 : SELECT memberships.id FROM memberships  ORDER BY Person.birthday
csize2: 6
base = Membership
	components = 	(Membership.id) \
	(Person.birthday) \
	order(Membership.id) \
	order(Person.birthday) \
	(Membership.id) \
	(Person.birthday)

###fields###
raw_query = order("people.first_name, people.last_name")
csize1: 6
sql1 :  ORDER BY Person.last_name
sql2 : SELECT memberships.id FROM memberships  ORDER BY Person.last_name
csize2: 8
base = Membership
	components = 	(Membership.id) \
	(Person.first_name) \
	(Person.last_name) \
	order(Membership.id) \
	order(Person.first_name) \
	order(Person.last_name) \
	(Membership.id) \
	(Person.last_name)

###fields###
raw_query = order(created_at: :desc).includes(:person, :group).where(streamable_type: shared_streamable_types).where(shared: true).where("(group_id is not null or streamable_type != 'Message')").where("(group_id in (:group_ids) or " "(group_id is null and person_id in (:friend_ids)) or " "person_id = :id or " "streamable_type in ('NewsItem', 'Site', 'Person') or " "is_public = :true)", group_ids: person.groups.active.pluck(:id), friend_ids: person.sharing_with_people.pluck(:id), id: person.id, true: true).where("streamable_type != 'Person' or person_id != :id", id: person.id).where(stream_item_group_id: nil)
csize1: 10
sql1 :  ORDER BY StreamItem.created_at  LEFT OUTER JOIN people ON people.id = stream_items.person_id  LEFT OUTER JOIN groups ON groups.id = stream_items.group_id WHERE stream_items.streamable_type=? AND stream_items.shared=? AND (group_id is not null or streamable_type != 'Message') AND  AND streamable_type != 'Person' or person_id != :id AND stream_items.stream_item_group_id=?
sql2 : SELECT stream_items.id FROM stream_items  ORDER BY StreamItem.created_at  LEFT OUTER JOIN people ON people.id = stream_items.person_id  LEFT OUTER JOIN groups ON groups.id = stream_items.group_id WHERE stream_items.streamable_type=? AND stream_items.shared=? AND (group_id is not null or streamable_type != 'Message') AND  AND streamable_type != 'Person' or person_id != :id AND stream_items.stream_item_group_id=?
csize2: 10
base = StreamItem
	components = 	(StreamItem.created_at) \
	order(StreamItem.created_at) \
	includes(StreamItem.person) \
	includes(StreamItem.group) \
	((StreamItem.streamable_type) = ?) \
	((StreamItem.shared) = ?) \
	(StreamItem.id) \
	(stream_items.group_id) \
	(stream_items.streamable_type) \
	((StreamItem.stream_item_group_id) = ?)

###fields###
raw_query = p.content_type.downcase.split(";").first
query = p.content_type.downcase.split(";").first [{:method=>"p", :class=>"P", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae13538>, :class=>"P", :class_name=>""}, {:method=>"content_type", :class=>"P", :class_name=>""}, {:method=>"downcase", :class=>"P", :class_name=>""}, {:method=>"split", :class=>"P", :class_name=>""}, {:method=>"first", :class=>"P", :class_name=>""}]
Table P does not exist!

raw_query = p.content_type.downcase.split(";").first
query = p.content_type.downcase.split(";").first [{:method=>"p", :class=>"P", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae13858>, :class=>"P", :class_name=>""}, {:method=>"content_type", :class=>"P", :class_name=>""}, {:method=>"downcase", :class=>"P", :class_name=>""}, {:method=>"split", :class=>"P", :class_name=>""}, {:method=>"first", :class=>"P", :class_name=>""}]
Table P does not exist!

raw_query = p.content_type.downcase.split(";").first
query = p.content_type.downcase.split(";").first [{:method=>"p", :class=>"P", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae13ba0>, :class=>"P", :class_name=>""}, {:method=>"content_type", :class=>"P", :class_name=>""}, {:method=>"downcase", :class=>"P", :class_name=>""}, {:method=>"split", :class=>"P", :class_name=>""}, {:method=>"first", :class=>"P", :class_name=>""}]
Table P does not exist!

raw_query = p.name.downcase.split.first
query = p.name.downcase.split.first [{:method=>"p", :class=>"P", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae3a4d0>, :class=>"P", :class_name=>""}, {:method=>"name", :class=>"P", :class_name=>""}, {:method=>"downcase", :class=>"P", :class_name=>""}, {:method=>"split", :class=>"P", :class_name=>""}, {:method=>"first", :class=>"P", :class_name=>""}]
Table P does not exist!

raw_query = params.keys.select { |k|
  
  k =~ /_id$/
}.last
query = params.keys.select { |k|
  
  k =~ /_id$/
}.last [{:method=>"params", :class=>"Param", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadeae08>, :class=>"Param", :class_name=>""}, {:method=>"keys", :class=>"Param", :class_name=>""}, {:method=>"select", :class=>"Param", :class_name=>""}, {:method=>"last", :class=>"Param", :class_name=>""}]
Table Param does not exist!

raw_query = params[:sort].to_s.split(",").first
query = params[:sort].to_s.split(",").first [{:method=>"params[sort]", :class=>"Params[sort]", :class_name=>""}, {:method=>"to_s", :class=>"Params[sort]", :class_name=>""}, {:method=>"split", :class=>"Params[sort]", :class_name=>""}, {:method=>"first", :class=>"Params[sort]", :class_name=>""}]
Table Params[sort] does not exist!

raw_query = parent.children.where(slug: slug).first
query = parent.children.where(slug: slug).first [{:method=>"parent", :class=>"Parent", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae53110>, :class=>"Parent", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae530c0>, :class=>"Parent", :class_name=>""}, {:method=>"children", :class=>"Parent", :class_name=>""}, {:method=>"where", :class=>"Parent", :class_name=>""}, {:method=>"first", :class=>"Parent", :class_name=>""}]
Table Parent does not exist!

raw_query = parent_folders.flat_map(&:group_ids).uniq
query = parent_folders.flat_map(&:group_ids).uniq [{:method=>"parent_folders", :class=>"ParentFolder", :class_name=>""}, {:method=>"flat_map", :class=>"ParentFolder", :class_name=>""}, {:method=>"uniq", :class=>"ParentFolder", :class_name=>""}]
Table ParentFolder does not exist!

raw_query = people.first
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = people.first
csize1: 1
sql1 :  LIMIT 1
sql2 : SELECT people.id FROM people  LIMIT 1
csize2: 2
base = Person
	components = 	return_limit(1) \
	(Person.id)

raw_query = people.select
csize1: 0
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 1
base = Person
	query cannot be handled

raw_query = people.select
csize1: 0
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 1
base = Person
	query cannot be handled

raw_query = people.select(&:adult?)
csize1: 2
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 3
base = Person
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="adult?", ruby_meth=nil> adult?
field doesn't exist #<struct QueryColumn table="Person", column="adult?", ruby_meth="select"> adult?
raw_query = people.select(&:primary_emailer?)
csize1: 2
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 3
base = Person
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="primary_emailer?", ruby_meth=nil> primary_emailer?
field doesn't exist #<struct QueryColumn table="Person", column="primary_emailer?", ruby_meth="select"> primary_emailer?
raw_query = people.undeleted.adults.limit(2).map
csize1: 3
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 4
base = Person
	query cannot be handled

###fields###
raw_query = people.undeleted.order(:position)
csize1: 3
sql1 :  ORDER BY Person.position
sql2 : SELECT people.id FROM people  ORDER BY Person.position
csize2: 5
base = Person
	components = 	(Person.position) \
	order(Person.position) \
	(Person.id) \
	(Person.position)

###fields###
raw_query = people.undeleted.reorder(:id).select
csize1: 3
sql1 :  ORDER BY Person.id
sql2 : SELECT people.id FROM people  ORDER BY Person.id
csize2: 5
base = Person
	components = 	(Person.id) \
	order(Person.id) \
	(Person.id) \
	(Person.id)

###fields###
raw_query = people.undeleted.select
csize1: 1
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 2
base = Person
	query cannot be handled

###fields###
raw_query = people.where(attrs).first
csize1: 1
sql1 :  WHERE  LIMIT 1
sql2 : SELECT people.id FROM people  WHERE  LIMIT 1
csize2: 1
base = Person
	components = 	return_limit(1)

raw_query = people.where(email: hash["email"].downcase).first
csize1: 2
sql1 :  WHERE people.email=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.email=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.email) = ?) \
	return_limit(1) \
	(Person.email) \
	(Person.id)

###fields###
raw_query = people.where(id: hash["id"]).first
csize1: 2
sql1 :  WHERE people.id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.id=? LIMIT 1
csize2: 3
base = Person
	components = 	((Person.id) = ?) \
	return_limit(1) \
	(Person.id)

###fields###
raw_query = people.where(legacy_id: hash["legacy_id"]).first
csize1: 2
sql1 :  WHERE people.legacy_id=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.legacy_id=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.legacy_id) = ?) \
	return_limit(1) \
	(Person.legacy_id) \
	(Person.id)

###fields###
raw_query = people.where(mobile_phone: hash["mobile_phone"].digits_only).first
csize1: 2
sql1 :  WHERE people.mobile_phone=? LIMIT 1
sql2 : SELECT people.id FROM people  WHERE people.mobile_phone=? LIMIT 1
csize2: 4
base = Person
	components = 	((Person.mobile_phone) = ?) \
	return_limit(1) \
	(Person.mobile_phone) \
	(Person.id)

###fields###
raw_query = person.admin?(:manage_groups)
csize1: 1
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 2
base = Person
	query cannot be handled

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="manage_groups", ruby_meth=nil> manage_groups
raw_query = person.friendship_requests.create!(from: self)
csize1: 0
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 1
base = Person
	query cannot be handled

raw_query = person.friendship_requests.where(from_id: id, rejected: false).any?
csize1: 2
sql1 :  WHERE people.from_id=? AND people.rejected=?
sql2 : SELECT people.id FROM people  WHERE people.from_id=? AND people.rejected=?
csize2: 5
base = Person
	components = 	((Person.from_id) = ?) \
	((Person.rejected) = ?) \
	(Person.id) \
	(Person.from_id) \
	(Person.rejected)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="from_id", ruby_meth=nil> from_id
field doesn't exist #<struct QueryColumn table="Person", column="rejected", ruby_meth=nil> rejected
field doesn't exist #<struct QueryColumn table="Person", column="from_id", ruby_meth=nil> from_id
field doesn't exist #<struct QueryColumn table="Person", column="rejected", ruby_meth=nil> rejected
raw_query = person.friendship_requests.where(from_id: id, rejected: true).any?
csize1: 2
sql1 :  WHERE people.from_id=? AND people.rejected=?
sql2 : SELECT people.id FROM people  WHERE people.from_id=? AND people.rejected=?
csize2: 5
base = Person
	components = 	((Person.from_id) = ?) \
	((Person.rejected) = ?) \
	(Person.id) \
	(Person.from_id) \
	(Person.rejected)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="from_id", ruby_meth=nil> from_id
field doesn't exist #<struct QueryColumn table="Person", column="rejected", ruby_meth=nil> rejected
field doesn't exist #<struct QueryColumn table="Person", column="from_id", ruby_meth=nil> from_id
field doesn't exist #<struct QueryColumn table="Person", column="rejected", ruby_meth=nil> rejected
raw_query = pic.first
query = pic.first [{:method=>"pic", :class=>"Pic", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae28438>, :class=>"Pic", :class_name=>""}, {:method=>"first", :class=>"Pic", :class_name=>""}]
Table Pic does not exist!

raw_query = pic.first
query = pic.first [{:method=>"pic", :class=>"Pic", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae326e0>, :class=>"Pic", :class_name=>""}, {:method=>"first", :class=>"Pic", :class_name=>""}]
Table Pic does not exist!

raw_query = pictures.find(picture.id).update_attributes!(cover: true)
csize1: 1
sql1 :  WHERE id = ?
sql2 : SELECT pictures.id FROM pictures  WHERE id = ?
csize2: 3
base = Picture
	components = 	((Picture.id) = ?) \
	(pictures.id) \
	(Picture.id)

###fields###
raw_query = pictures.order("cover desc, id").first
csize1: 7
sql1 :  ORDER BY pictures.id LIMIT 1
sql2 : SELECT pictures.id FROM pictures  ORDER BY pictures.id LIMIT 1
csize2: 8
base = Picture
	components = 	(Picture.id) \
	(pictures.cover) \
	(pictures.id) \
	order(Picture.id) \
	order(pictures.cover) \
	order(pictures.id) \
	return_limit(1) \
	(Picture.id)

###fields###
raw_query = prayer_requests.order(created_at: :desc).page(params[:page])
csize1: 2
sql1 :  ORDER BY PrayerRequest.created_at
sql2 : SELECT prayer_requests.id FROM prayer_requests  ORDER BY PrayerRequest.created_at
csize2: 4
base = PrayerRequest
	components = 	(PrayerRequest.created_at) \
	order(PrayerRequest.created_at) \
	(PrayerRequest.id) \
	(Prayerrequest.created_at)

###fields###
t is null #<struct QueryColumn table="Prayerrequest", column="created_at", ruby_meth=nil>
raw_query = prayer_requests.where("coalesce(answer, '') != ''").order(created_at: :desc).page(params[:page])
csize1: 4
sql1 :  WHERE coalesce(answer, '') != '' ORDER BY PrayerRequest.created_at
sql2 : SELECT prayer_requests.id FROM prayer_requests  WHERE coalesce(answer, '') != '' ORDER BY PrayerRequest.created_at
csize2: 7
base = PrayerRequest
	components = 	(PrayerRequest.id) \
	(prayer_requests.answer) \
	(PrayerRequest.created_at) \
	order(PrayerRequest.created_at) \
	(PrayerRequest.id) \
	(Prayerrequest.created_at) \
	(prayer_requests.answer)

###fields###
t is null #<struct QueryColumn table="Prayerrequest", column="created_at", ruby_meth=nil>
raw_query = r.where!(campus: campus)
query = r.where!(campus: campus) [{:method=>"r", :class=>"R", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae22ab0>, :class=>"R", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae22a10>, :class=>"R", :class_name=>""}, {:method=>"where!", :class=>"R", :class_name=>""}, {:method=>"where!", :class=>"R", :class_name=>""}]
Table R does not exist!

raw_query = relationships.includes(:related).to_a.select do |relationship|
  
  !Setting.get(:system, :online_only_relationships).include?(relationship.name_or_other)
end.map do |relationship|
  
  "#{
  relationship.related.legacy_id}[#{
  relationship.name_or_other}]"
end.sort
csize1: 1
sql1 :   LEFT OUTER JOIN people ON people.id = relationships.person_id
sql2 : SELECT relationships.id FROM relationships   LEFT OUTER JOIN people ON people.id = relationships.person_id
csize2: 4
base = Relationship
	components = 	includes(Relationship.related) \
	(Relationship.id) \
	(Person.id) \
	(Relationship.person_id)

###fields###
raw_query = results.first
query = results.first [{:method=>"results", :class=>"Result", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae195f0>, :class=>"Result", :class_name=>""}, {:method=>"first", :class=>"Result", :class_name=>""}]
Table Result does not exist!

raw_query = routes["items"].select
query = routes["items"].select [{:method=>"routes[items]", :class=>"Routes[items]", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae39620>, :class=>"Routes[items]", :class_name=>""}, {:method=>"select", :class=>"Routes[items]", :class_name=>""}]
Table Routes[items] does not exist!

raw_query = scope.select("id, legacy_id, name, last_name, barcode_id, barcode_assigned_at").order("barcode_assigned_at desc")
query = scope.select("id, legacy_id, name, last_name, barcode_id, barcode_assigned_at").order("barcode_assigned_at desc") [{:method=>"scope", :class=>"Scope", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadc30b0>, :class=>"Scope", :class_name=>""}, {:method=>"select", :class=>"Scope", :class_name=>""}, {:method=>"order", :class=>"Scope", :class_name=>""}, {:method=>"order", :class=>"Scope", :class_name=>""}]
Table Scope does not exist!

raw_query = select("*, " "(select count(*) from import_rows where site_id = imports.site_id and import_id = imports.id) as row_count, " "(select count(*) from import_rows where site_id = imports.site_id and import_id = imports.id and errored = 1) as row_error_count")
csize1: 0
sql1 : 
sql2 : SELECT imports.id FROM imports 
csize2: 1
base = Import
	query cannot be handled

raw_query = select("*, (select count(*) from people_verses where verse_id = verses.id) as people_count")
csize1: 1
sql1 : *, (select count(*) from people_verses where verse_id = verses.id) as people_count
sql2 : SELECT verses.id FROM verses *, (select count(*) from people_verses where verse_id = verses.id) as people_count
csize2: 3
base = Verse
	components = 	select(Verse.*, (select count(*) from people_verses where verse_id = verses.id) as people_count) \
	(Verse.id) \
	(verses.verse_id)

###fields###
field doesn't exist #<struct QueryColumn table="Verse", column="*, (select count(*) from people_verses where verse_id = verses.id) as people_count", ruby_meth="select"> (select count(*) from people_verses where verse_id = verses.id) as people_count
field doesn't exist #<struct QueryColumn table="Verse", column="verse_id", ruby_meth=nil> verse_id
raw_query = select(MINIMAL_ATTRIBUTES.map { |a|
  
  "people.#{
  a}"
}.join(","))
csize1: 0
sql1 : 
sql2 : SELECT people.id FROM people 
csize2: 1
base = Person
	query cannot be handled

raw_query = self.pending_friendship_requests.where(from_id: person.id).first
query = self.pending_friendship_requests.where(from_id: person.id).first [{:method=>"self", :class=>"Self", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae21138>, :class=>"Self", :class_name=>""}, {:method=>"id", :class=>"Self", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae21020>, :class=>"Self", :class_name=>""}, {:method=>"pending_friendship_requests", :class=>"Self", :class_name=>""}, {:method=>"where", :class=>"Self", :class_name=>""}, {:method=>"first", :class=>"Self", :class_name=>""}]
Table Self does not exist!

raw_query = self.person.friendships.create!(friend: self.from)
csize1: 1
sql1 :   LEFT OUTER JOIN people ON people.id = friendship_requests.person_id
sql2 : SELECT friendship_requests.id FROM friendship_requests   LEFT OUTER JOIN people ON people.id = friendship_requests.person_id
csize2: 4
base = FriendshipRequest
	components = 	((Person.id) = ?) \
	(FriendshipRequest.id) \
	(Person.id) \
	(FriendshipRequest.person_id)

###fields###
raw_query = settings.where(section: "Name", name: "Site").first.value
csize1: 4
sql1 :  WHERE settings.section=? AND settings.name=? LIMIT 1
sql2 : SELECT settings.id FROM settings  WHERE settings.section=? AND settings.name=? LIMIT 1
csize2: 7
base = Setting
	components = 	((Setting.section) = ?) \
	((Setting.name) = ?) \
	return_limit(1) \
	select(Setting.value) \
	(Setting.id) \
	(Setting.section) \
	(Setting.name)

###fields###
raw_query = settings.where(section: "URL", name: "Site").first
csize1: 3
sql1 :  WHERE settings.section=? AND settings.name=? LIMIT 1
sql2 : SELECT settings.id FROM settings  WHERE settings.section=? AND settings.name=? LIMIT 1
csize2: 6
base = Setting
	components = 	((Setting.section) = ?) \
	((Setting.name) = ?) \
	return_limit(1) \
	(Setting.id) \
	(Setting.section) \
	(Setting.name)

###fields###
raw_query = small_group_people.pluck(:id, :group_id)
query = small_group_people.pluck(:id, :group_id) [{:method=>"small_group_people", :class=>"SmallGroupPerson", :class_name=>""}, {:method=>"pluck", :class=>"SmallGroupPerson", :class_name=>""}, {:method=>"pluck", :class=>"SmallGroupPerson", :class_name=>""}]
Table SmallGroupPerson does not exist!

raw_query = tasks.order(completed: :asc, duedate: :asc).page(params[:page])
csize1: 4
sql1 :  ORDER BY Task.duedate
sql2 : SELECT tasks.id FROM tasks  ORDER BY Task.duedate
csize2: 6
base = Task
	components = 	(Task.completed) \
	(Task.duedate) \
	order(Task.completed) \
	order(Task.duedate) \
	(Task.id) \
	(Task.duedate)

###fields###
raw_query = undeleted.where("admin_id is not null")
csize1: 2
sql1 :  WHERE admin_id is not null
sql2 : SELECT people.id FROM people  WHERE admin_id is not null
csize2: 4
base = Person
	components = 	(people.admin_id) \
	(Person.id) \
	(people.admin_id) \
	(Person.id)

###fields###
raw_query = undeleted.where(email: email.downcase)
query = undeleted.where(email: email.downcase) [{:method=>"undeleted", :class=>"Undeleted", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae21430>, :class=>"Undeleted", :class_name=>""}, {:method=>"downcase", :class=>"Undeleted", :class_name=>""}, {:method=>"where", :class=>"Undeleted", :class_name=>""}, {:method=>"where", :class=>"Undeleted", :class_name=>""}]
Table Undeleted does not exist!

raw_query = undeleted.where(email_changed: true)
query = undeleted.where(email_changed: true) [{:method=>"where", :class=>"EmailChanged", :class_name=>""}]
Table EmailChanged does not exist!

raw_query = undeleted.where(status: Person.statuses.values_at(:pending, :active))
csize1: 1
sql1 :  WHERE people.status=?
sql2 : SELECT people.id FROM people  WHERE people.status=?
csize2: 3
base = Person
	components = 	((Person.status) = ?) \
	(Person.status) \
	(Person.id)

###fields###
raw_query = value.first
query = value.first [{:method=>"value", :class=>"Value", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eae08070>, :class=>"Value", :class_name=>""}, {:method=>"first", :class=>"Value", :class_name=>""}]
Table Value does not exist!

raw_query = where!("(concat(people.first_name, ' ', people.last_name) #{
like} :full_name
       or (families.name #{
like} :full_name)
       or (people.alias) #{
like} :first_name
       or (people.first_name #{
like} :first_name and people.last_name #{
like} :last_name))
      ", full_name: like_match(name), first_name: like_match(name.split.first, :after), last_name: like_match(name.split.last, :after))
csize1: 0
sql1 :  WHERE (concat(people.first_name, ' ', people.last_name) ?  :full_name
       or (families.name ?  :full_name)
       or (people.alias) ?  :first_name
       or (people.first_name ?  ? and people.last_name ?  :last_name))
      
sql2 : SELECT searches.id FROM searches  WHERE (concat(people.first_name, ' ', people.last_name) ?  :full_name
       or (families.name ?  :full_name)
       or (people.alias) ?  :first_name
       or (people.first_name ?  ? and people.last_name ?  :last_name))
      
csize2: 0
base = Search
	components = 

raw_query = where!("(people.child = ? or coalesce(people.parental_consent, '') != '')", false)
csize1: 3
sql1 :  WHERE (people.child = ? or coalesce(people.parental_consent, '') != '')
sql2 : SELECT searches.id FROM searches  WHERE (people.child = ? or coalesce(people.parental_consent, '') != '')
csize2: 6
base = Search
	components = 	(Search.id) \
	(Person.child) \
	(Person.parental_consent) \
	(Search.id) \
	(Person.child) \
	(Person.parental_consent)

###fields###
raw_query = where!("coalesce(people.business_name, '') != ''")
csize1: 2
sql1 :  WHERE coalesce(people.business_name, '') != ''
sql2 : SELECT searches.id FROM searches  WHERE coalesce(people.business_name, '') != ''
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.business_name) \
	(Search.id) \
	(Person.business_name)

###fields###
raw_query = where!("coalesce(people.testimony, '') != ''")
csize1: 2
sql1 :  WHERE coalesce(people.testimony, '') != ''
sql2 : SELECT searches.id FROM searches  WHERE coalesce(people.testimony, '') != ''
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.testimony) \
	(Search.id) \
	(Person.testimony)

###fields###
raw_query = where!("extract( day from people.birthday)   = ?", birthday[:day])
csize1: 2
sql1 :  WHERE extract( day from people.birthday)   = ?
sql2 : SELECT searches.id FROM searches  WHERE extract( day from people.birthday)   = ?
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.birthday) \
	(Search.id) \
	(Person.birthday)

###fields###
raw_query = where!("extract( month from people.birthday) = ?", birthday[:month])
csize1: 2
sql1 :  WHERE extract( month from people.birthday) = ?
sql2 : SELECT searches.id FROM searches  WHERE extract( month from people.birthday) = ?
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.birthday) \
	(Search.id) \
	(Person.birthday)

###fields###
raw_query = where!("extract(day from people.anniversary)   = ?", anniversary[:day])
csize1: 2
sql1 :  WHERE extract(day from people.anniversary)   = ?
sql2 : SELECT searches.id FROM searches  WHERE extract(day from people.anniversary)   = ?
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.anniversary) \
	(Search.id) \
	(Person.anniversary)

###fields###
raw_query = where!("extract(month from people.anniversary) = ?", anniversary[:month])
csize1: 2
sql1 :  WHERE extract(month from people.anniversary) = ?
sql2 : SELECT searches.id FROM searches  WHERE extract(month from people.anniversary) = ?
csize2: 4
base = Search
	components = 	(Search.id) \
	(Person.anniversary) \
	(Search.id) \
	(Person.anniversary)

###fields###
raw_query = where!("families.barcode_id = :id or families.alternate_barcode_id = :id", id: family_barcode_id)
csize1: 0
sql1 :  WHERE families.barcode_id = ? or families.alternate_barcode_id = :id
sql2 : SELECT searches.id FROM searches  WHERE families.barcode_id = ? or families.alternate_barcode_id = :id
csize2: 0
base = Search
	components = 

raw_query = where!("families.city  #{
like} ?", like_match(address[:city], :after))
csize1: 2
sql1 :  WHERE families.city  ?  ?
sql2 : SELECT searches.id FROM searches  WHERE families.city  ?  ?
csize2: 4
base = Search
	components = 	(Family.city) \
	(Search.id) \
	(Family.city) \
	(Search.id)

###fields###
raw_query = where!("families.state #{
like} ?", like_match(address[:state], :after))
csize1: 2
sql1 :  WHERE families.state ?  ?
sql2 : SELECT searches.id FROM searches  WHERE families.state ?  ?
csize2: 4
base = Search
	components = 	(Family.state) \
	(Search.id) \
	(Family.state) \
	(Search.id)

###fields###
raw_query = where!("families.zip   #{
like} ?", like_match(address[:zip], :after))
csize1: 2
sql1 :  WHERE families.zip   ?  ?
sql2 : SELECT searches.id FROM searches  WHERE families.zip   ?  ?
csize2: 4
base = Search
	components = 	(Family.zip) \
	(Search.id) \
	(Family.zip) \
	(Search.id)

###fields###
raw_query = where!("groups.category != ? OR groups.category IS NULL", group_category)
csize1: 2
sql1 :  WHERE groups.category != ? OR groups.category IS NULL
sql2 : SELECT searches.id FROM searches  WHERE groups.category != ? OR groups.category IS NULL
csize2: 4
base = Search
	components = 	(Search.id) \
	(Group.category) \
	(Search.id) \
	(Group.category)

###fields###
raw_query = where!("groups.category = ?", group_category)
csize1: 2
sql1 :  WHERE groups.category = ?
sql2 : SELECT searches.id FROM searches  WHERE groups.category = ?
csize2: 4
base = Search
	components = 	(Group.category) \
	(Search.id) \
	(Group.category) \
	(Search.id)

###fields###
raw_query = where!("people.#{
type} = ?", true)
csize1: 0
sql1 :  WHERE people.?  = ?
sql2 : SELECT searches.id FROM searches  WHERE people.?  = ?
csize2: 0
base = Search
	components = 

raw_query = where!("people.custom_type = ?", type)
csize1: 2
sql1 :  WHERE people.custom_type = ?
sql2 : SELECT searches.id FROM searches  WHERE people.custom_type = ?
csize2: 4
base = Search
	components = 	(Person.custom_type) \
	(Search.id) \
	(Person.custom_type) \
	(Search.id)

###fields###
raw_query = where!("people.email = :email or
            people.alternate_email = :email", email: email)
csize1: 0
sql1 :  WHERE people.email = ? or
            people.alternate_email = :email
sql2 : SELECT searches.id FROM searches  WHERE people.email = ? or
            people.alternate_email = :email
csize2: 0
base = Search
	components = 

raw_query = where!("people.mobile_phone = :phone or
            people.work_phone   = :phone or
            families.home_phone = :phone", phone: phone.digits_only)
csize1: 0
sql1 :  WHERE people.mobile_phone = ? or
            people.work_phone   = ? or
            families.home_phone = :phone
sql2 : SELECT searches.id FROM searches  WHERE people.mobile_phone = ? or
            people.work_phone   = ? or
            families.home_phone = :phone
csize2: 0
base = Search
	components = 

raw_query = where!(families: { deleted: false })
csize1: 1
sql1 :  WHERE searches.deleted=?
sql2 : SELECT searches.id FROM searches  WHERE searches.deleted=?
csize2: 3
base = Search
	components = 	((Family.deleted) = ?) \
	(Search.deleted) \
	(Search.id)

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="deleted", ruby_meth=nil> deleted
raw_query = where!(families: { visible: true })
csize1: 1
sql1 :  WHERE searches.visible=?
sql2 : SELECT searches.id FROM searches  WHERE searches.visible=?
csize2: 3
base = Search
	components = 	((Family.visible) = ?) \
	(Search.visible) \
	(Search.id)

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="visible", ruby_meth=nil> visible
raw_query = where!(people: { deleted: false })
csize1: 1
sql1 :  WHERE searches.deleted=?
sql2 : SELECT searches.id FROM searches  WHERE searches.deleted=?
csize2: 3
base = Search
	components = 	((Person.deleted) = ?) \
	(Search.deleted) \
	(Search.id)

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="deleted", ruby_meth=nil> deleted
raw_query = where!(people: { gender: gender })
csize1: 1
sql1 :  WHERE searches.gender=?
sql2 : SELECT searches.id FROM searches  WHERE searches.gender=?
csize2: 3
base = Search
	components = 	((Person.gender) = ?) \
	(Search.gender) \
	(Search.id)

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="gender", ruby_meth=nil> gender
raw_query = where!(people: { visible: true, status: Person.statuses.values_at(:active, :pending) })
csize1: 1
sql1 :  WHERE searches.visible=?
sql2 : SELECT searches.id FROM searches  WHERE searches.visible=?
csize2: 3
base = Search
	components = 	((Person.visible) = ?) \
	(Search.visible) \
	(Search.id)

###fields###
field doesn't exist #<struct QueryColumn table="Search", column="visible", ruby_meth=nil> visible
raw_query = where("((the_datetime >= ? and the_datetime <= ?) or weekday = ?)", date.beginning_of_day.strftime("%Y-%m-%dT%H:%M:%S"), date.end_of_day.strftime("%Y-%m-%dT%H:%M:%S"), date.wday)
csize1: 3
sql1 :  WHERE ((the_datetime >= ? and the_datetime <= ?) or weekday = ?)
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE ((the_datetime >= ? and the_datetime <= ?) or weekday = ?)
csize2: 6
base = CheckinTime
	components = 	(CheckinTime.id) \
	(checkin_times.weekday) \
	(checkin_times.the_datetime) \
	(CheckinTime.id) \
	(checkin_times.weekday) \
	(checkin_times.the_datetime)

###fields###
raw_query = where("(select count(*) from people where family_id = families.id and status = ? and deleted = ?) > 0", Person.statuses[:active], false)
csize1: 4
sql1 :  WHERE (select count(*) from people where family_id = families.id and status = ? and deleted = ?) > 0
sql2 : SELECT families.id FROM families  WHERE (select count(*) from people where family_id = families.id and status = ? and deleted = ?) > 0
csize2: 8
base = Family
	components = 	(Family.id) \
	(families.family_id) \
	(families.status) \
	(families.deleted) \
	(Family.id) \
	(families.family_id) \
	(families.status) \
	(families.deleted)

###fields###
field doesn't exist #<struct QueryColumn table="Family", column="family_id", ruby_meth=nil> family_id
field doesn't exist #<struct QueryColumn table="Family", column="status", ruby_meth=nil> status
field doesn't exist #<struct QueryColumn table="Family", column="family_id", ruby_meth=nil> family_id
field doesn't exist #<struct QueryColumn table="Family", column="status", ruby_meth=nil> status
raw_query = where("barcode_id = ? or alternate_barcode_id = ?", b, b)
csize1: 3
sql1 :  WHERE barcode_id = ? or alternate_barcode_id = ?
sql2 : SELECT families.id FROM families  WHERE barcode_id = ? or alternate_barcode_id = ?
csize2: 6
base = Family
	components = 	(Family.id) \
	(families.barcode_id) \
	(families.alternate_barcode_id) \
	(Family.id) \
	(families.barcode_id) \
	(families.alternate_barcode_id)

###fields###
raw_query = where("birthday is not null and extract(month from birthday) = ?", m)
csize1: 2
sql1 :  WHERE birthday is not null and extract(month from birthday) = ?
sql2 : SELECT people.id FROM people  WHERE birthday is not null and extract(month from birthday) = ?
csize2: 4
base = Person
	components = 	(Person.id) \
	(people.birthday) \
	(Person.id) \
	(people.birthday)

###fields###
raw_query = where("business_category is not null and business_category != ''").order(:business_category).pluck("distinct business_category")
csize1: 5
sql1 :  WHERE business_category is not null and business_category != '' ORDER BY Person.business_categorydistinct business_category
sql2 : SELECT people.id FROM people  WHERE business_category is not null and business_category != '' ORDER BY Person.business_categorydistinct business_category
csize2: 5
base = Person
	components = 	(Person.id) \
	(people.business_category) \
	(Person.business_category) \
	order(Person.business_category) \
	select(Person.distinct business_category)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="distinct business_category", ruby_meth="select"> distinct business_category
raw_query = where("child = ? or coalesce(parental_consent, '') != ''", false)
csize1: 3
sql1 :  WHERE child = ? or coalesce(parental_consent, '') != ''
sql2 : SELECT people.id FROM people  WHERE child = ? or coalesce(parental_consent, '') != ''
csize2: 6
base = Person
	components = 	(Person.id) \
	(people.child) \
	(people.parental_consent) \
	(Person.id) \
	(people.child) \
	(people.parental_consent)

###fields###
raw_query = where("created_at < ?", 1.day.ago)
csize1: 2
sql1 :  WHERE created_at < ?
sql2 : SELECT generated_files.id FROM generated_files  WHERE created_at < ?
csize2: 4
base = GeneratedFile
	components = 	(generated_files.created_at) \
	(GeneratedFile.id) \
	(generated_files.created_at) \
	(GeneratedFile.id)

###fields###
raw_query = where("custom_type is not null and custom_type != ''").order(:custom_type).pluck("distinct custom_type")
csize1: 5
sql1 :  WHERE custom_type is not null and custom_type != '' ORDER BY Person.custom_typedistinct custom_type
sql2 : SELECT people.id FROM people  WHERE custom_type is not null and custom_type != '' ORDER BY Person.custom_typedistinct custom_type
csize2: 5
base = Person
	components = 	(Person.id) \
	(people.custom_type) \
	(Person.custom_type) \
	order(Person.custom_type) \
	select(Person.distinct custom_type)

###fields###
field doesn't exist #<struct QueryColumn table="Person", column="distinct custom_type", ruby_meth="select"> distinct custom_type
raw_query = where("date(attended_at) = date(?)", d)
csize1: 2
sql1 :  WHERE date(attended_at) = date(?)
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE date(attended_at) = date(?)
csize2: 4
base = AttendanceRecord
	components = 	(AttendanceRecord.id) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(attendance_records.attended_at)

###fields###
raw_query = where("file_content_type like 'image/%'")
csize1: 2
sql1 :  WHERE file_content_type like 'image/%'
sql2 : SELECT attachments.id FROM attachments  WHERE file_content_type like 'image/%'
csize2: 4
base = Attachment
	components = 	(attachments.file_content_type) \
	(Attachment.id) \
	(attachments.file_content_type) \
	(Attachment.id)

###fields###
raw_query = where("file_content_type not like 'image/%'")
csize1: 2
sql1 :  WHERE file_content_type not like 'image/%'
sql2 : SELECT attachments.id FROM attachments  WHERE file_content_type not like 'image/%'
csize2: 4
base = Attachment
	components = 	(attachments.file_content_type) \
	(Attachment.id) \
	(attachments.file_content_type) \
	(Attachment.id)

###fields###
raw_query = where("id != ?", m.id || 0).where(person_id: m.person_id, subject: m.subject, body: m.body, to_person_id: m.to_person_id, group_id: m.group_id).where("created_at >= ?", 1.day.ago)
csize1: 9
sql1 :  WHERE id != ? AND messages.person_id=? AND messages.subject=? AND messages.body=? AND messages.to_person_id=? AND messages.group_id=? AND created_at >= ?
sql2 : SELECT messages.id FROM messages  WHERE id != ? AND messages.person_id=? AND messages.subject=? AND messages.body=? AND messages.to_person_id=? AND messages.group_id=? AND created_at >= ?
csize2: 17
base = Message
	components = 	(messages.id) \
	(Message.id) \
	((Message.person_id) = ?) \
	((Message.subject) = ?) \
	((Message.body) = ?) \
	((Message.to_person_id) = ?) \
	((Message.group_id) = ?) \
	(messages.created_at) \
	(Message.id) \
	(Message.id) \
	(messages.id) \
	(Message.person_id) \
	(Message.subject) \
	(Message.body) \
	(Message.to_person_id) \
	(Message.group_id) \
	(messages.created_at)

###fields###
raw_query = where("link_code is not null and link_code != ''")
csize1: 2
sql1 :  WHERE link_code is not null and link_code != ''
sql2 : SELECT groups.id FROM groups  WHERE link_code is not null and link_code != ''
csize2: 4
base = Group
	components = 	(Group.id) \
	(groups.link_code) \
	(Group.id) \
	(groups.link_code)

###fields###
raw_query = where("parents_of is not null")
csize1: 2
sql1 :  WHERE parents_of is not null
sql2 : SELECT groups.id FROM groups  WHERE parents_of is not null
csize2: 4
base = Group
	components = 	(groups.parents_of) \
	(Group.id) \
	(groups.parents_of) \
	(Group.id)

###fields###
raw_query = where("parents_of is null and (link_code is null or link_code = '')")
csize1: 3
sql1 :  WHERE parents_of is null and (link_code is null or link_code = '')
sql2 : SELECT groups.id FROM groups  WHERE parents_of is null and (link_code is null or link_code = '')
csize2: 6
base = Group
	components = 	(Group.id) \
	(groups.parents_of) \
	(groups.link_code) \
	(Group.id) \
	(groups.parents_of) \
	(groups.link_code)

###fields###
raw_query = where("person_id in (?) and attended_at >= ? and attended_at <= ?", people_ids, date.strftime("%Y-%m-%d 0:00"), date.strftime("%Y-%m-%d 23:59:59"))
csize1: 3
sql1 :  WHERE person_id in (?) and attended_at >= ? and attended_at <= ?
sql2 : SELECT attendance_records.id FROM attendance_records  WHERE person_id in (?) and attended_at >= ? and attended_at <= ?
csize2: 6
base = AttendanceRecord
	components = 	(AttendanceRecord.id) \
	(attendance_records.person_id) \
	(attendance_records.attended_at) \
	(AttendanceRecord.id) \
	(attendance_records.person_id) \
	(attendance_records.attended_at)

###fields###
raw_query = where("the_datetime is not null and the_datetime >= ?", 1.hour.ago.strftime("%Y-%m-%dT%H:%M:%S"))
csize1: 2
sql1 :  WHERE the_datetime is not null and the_datetime >= ?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE the_datetime is not null and the_datetime >= ?
csize2: 4
base = CheckinTime
	components = 	(CheckinTime.id) \
	(checkin_times.the_datetime) \
	(CheckinTime.id) \
	(checkin_times.the_datetime)

###fields###
raw_query = where("the_datetime is not null and the_datetime between :from and :to", from: 1.hour.ago.strftime("%Y-%m-%dT%H:%M:%S"), to: 4.hours.from_now.strftime("%Y-%m-%dT%H:%M:%S"))
csize1: 0
sql1 :  WHERE the_datetime is not null and the_datetime between ? and :to
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE the_datetime is not null and the_datetime between ? and :to
csize2: 0
base = CheckinTime
	components = 

raw_query = where(active: true)
csize1: 1
sql1 :  WHERE news_items.active=?
sql2 : SELECT news_items.id FROM news_items  WHERE news_items.active=?
csize2: 3
base = NewsItem
	components = 	((NewsItem.active) = ?) \
	(NewsItem.active) \
	(NewsItem.id)

###fields###
raw_query = where(approved: false)
csize1: 1
sql1 :  WHERE groups.approved=?
sql2 : SELECT groups.id FROM groups  WHERE groups.approved=?
csize2: 3
base = Group
	components = 	((Group.approved) = ?) \
	(Group.approved) \
	(Group.id)

###fields###
raw_query = where(approved: true)
csize1: 1
sql1 :  WHERE groups.approved=?
sql2 : SELECT groups.id FROM groups  WHERE groups.approved=?
csize2: 3
base = Group
	components = 	((Group.approved) = ?) \
	(Group.approved) \
	(Group.id)

###fields###
raw_query = where(child: false)
csize1: 1
sql1 :  WHERE people.child=?
sql2 : SELECT people.id FROM people  WHERE people.child=?
csize2: 3
base = Person
	components = 	((Person.child) = ?) \
	(Person.child) \
	(Person.id)

###fields###
raw_query = where(child: true)
csize1: 1
sql1 :  WHERE people.child=?
sql2 : SELECT people.id FROM people  WHERE people.child=?
csize2: 3
base = Person
	components = 	((Person.child) = ?) \
	(Person.child) \
	(Person.id)

###fields###
raw_query = where(complete: false)
csize1: 1
sql1 :  WHERE updates.complete=?
sql2 : SELECT updates.id FROM updates  WHERE updates.complete=?
csize2: 3
base = Update
	components = 	((Update.complete) = ?) \
	(Update.complete) \
	(Update.id)

###fields###
raw_query = where(complete: true)
csize1: 1
sql1 :  WHERE updates.complete=?
sql2 : SELECT updates.id FROM updates  WHERE updates.complete=?
csize2: 3
base = Update
	components = 	((Update.complete) = ?) \
	(Update.complete) \
	(Update.id)

###fields###
raw_query = where(completed: false)
csize1: 1
sql1 :  WHERE tasks.completed=?
sql2 : SELECT tasks.id FROM tasks  WHERE tasks.completed=?
csize2: 3
base = Task
	components = 	((Task.completed) = ?) \
	(Task.completed) \
	(Task.id)

###fields###
raw_query = where(created_family: false, updated_family: false)
csize1: 2
sql1 :  WHERE import_rows.created_family=? AND import_rows.updated_family=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.created_family=? AND import_rows.updated_family=?
csize2: 5
base = ImportRow
	components = 	((ImportRow.created_family) = ?) \
	((ImportRow.updated_family) = ?) \
	(ImportRow.id) \
	(ImportRow.created_family) \
	(ImportRow.updated_family)

###fields###
raw_query = where(created_family: true)
csize1: 1
sql1 :  WHERE import_rows.created_family=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.created_family=?
csize2: 3
base = ImportRow
	components = 	((ImportRow.created_family) = ?) \
	(ImportRow.created_family) \
	(ImportRow.id)

###fields###
raw_query = where(created_person: false, updated_person: false)
csize1: 2
sql1 :  WHERE import_rows.created_person=? AND import_rows.updated_person=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.created_person=? AND import_rows.updated_person=?
csize2: 5
base = ImportRow
	components = 	((ImportRow.created_person) = ?) \
	((ImportRow.updated_person) = ?) \
	(ImportRow.id) \
	(ImportRow.created_person) \
	(ImportRow.updated_person)

###fields###
raw_query = where(created_person: true)
csize1: 1
sql1 :  WHERE import_rows.created_person=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.created_person=?
csize2: 3
base = ImportRow
	components = 	((ImportRow.created_person) = ?) \
	(ImportRow.created_person) \
	(ImportRow.id)

###fields###
raw_query = where(deleted: false)
csize1: 1
sql1 :  WHERE people.deleted=?
sql2 : SELECT people.id FROM people  WHERE people.deleted=?
csize2: 3
base = Person
	components = 	((Person.deleted) = ?) \
	(Person.deleted) \
	(Person.id)

###fields###
raw_query = where(deleted: false)
csize1: 1
sql1 :  WHERE families.deleted=?
sql2 : SELECT families.id FROM families  WHERE families.deleted=?
csize2: 3
base = Family
	components = 	((Family.deleted) = ?) \
	(Family.deleted) \
	(Family.id)

###fields###
raw_query = where(deleted: true)
csize1: 1
sql1 :  WHERE people.deleted=?
sql2 : SELECT people.id FROM people  WHERE people.deleted=?
csize2: 3
base = Person
	components = 	((Person.deleted) = ?) \
	(Person.deleted) \
	(Person.id)

###fields###
raw_query = where(deleted: true)
csize1: 1
sql1 :  WHERE families.deleted=?
sql2 : SELECT families.id FROM families  WHERE families.deleted=?
csize2: 3
base = Family
	components = 	((Family.deleted) = ?) \
	(Family.deleted) \
	(Family.id)

###fields###
raw_query = where(email: request.params[:email].downcase, ip: request.remote_ip).where("created_at >= ?", 15.minutes.ago)
csize1: 4
sql1 :  WHERE signin_failures.email=? AND signin_failures.ip=? AND created_at >= ?
sql2 : SELECT signin_failures.id FROM signin_failures  WHERE signin_failures.email=? AND signin_failures.ip=? AND created_at >= ?
csize2: 8
base = SigninFailure
	components = 	((SigninFailure.email) = ?) \
	((SigninFailure.ip) = ?) \
	(signin_failures.created_at) \
	(SigninFailure.id) \
	(SigninFailure.id) \
	(SigninFailure.email) \
	(SigninFailure.ip) \
	(signin_failures.created_at)

###fields###
raw_query = where(errored: true)
csize1: 1
sql1 :  WHERE import_rows.errored=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.errored=?
csize2: 3
base = ImportRow
	components = 	((ImportRow.errored) = ?) \
	(ImportRow.errored) \
	(ImportRow.id)

###fields###
raw_query = where(folder_id: nil)
csize1: 1
sql1 :  WHERE document_folders.folder_id=?
sql2 : SELECT document_folders.id FROM document_folders  WHERE document_folders.folder_id=?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.folder_id) = ?) \
	(DocumentFolder.folder_id) \
	(DocumentFolder.id)

###fields###
raw_query = where(folder_id: nil)
csize1: 1
sql1 :  WHERE documents.folder_id=?
sql2 : SELECT documents.id FROM documents  WHERE documents.folder_id=?
csize2: 3
base = Document
	components = 	((Document.folder_id) = ?) \
	(Document.folder_id) \
	(Document.id)

###fields###
raw_query = where(hidden: false)
csize1: 1
sql1 :  WHERE document_folders.hidden=?
sql2 : SELECT document_folders.id FROM document_folders  WHERE document_folders.hidden=?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.hidden) = ?) \
	(DocumentFolder.hidden) \
	(DocumentFolder.id)

###fields###
raw_query = where(hidden: false)
csize1: 1
sql1 :  WHERE groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.hidden=?
csize2: 3
base = Group
	components = 	((Group.hidden) = ?) \
	(Group.hidden) \
	(Group.id)

###fields###
raw_query = where(hidden: true)
csize1: 1
sql1 :  WHERE document_folders.hidden=?
sql2 : SELECT document_folders.id FROM document_folders  WHERE document_folders.hidden=?
csize2: 3
base = DocumentFolder
	components = 	((DocumentFolder.hidden) = ?) \
	(DocumentFolder.hidden) \
	(DocumentFolder.id)

###fields###
raw_query = where(hidden: true)
csize1: 1
sql1 :  WHERE groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.hidden=?
csize2: 3
base = Group
	components = 	((Group.hidden) = ?) \
	(Group.hidden) \
	(Group.id)

###fields###
raw_query = where(id: id_or_path).first
csize1: 2
sql1 :  WHERE pages.id=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.id=? LIMIT 1
csize2: 3
base = Page
	components = 	((Page.id) = ?) \
	return_limit(1) \
	(Page.id)

###fields###
raw_query = where(leader: true)
csize1: 1
sql1 :  WHERE memberships.leader=?
sql2 : SELECT memberships.id FROM memberships  WHERE memberships.leader=?
csize2: 3
base = Membership
	components = 	((Membership.leader) = ?) \
	(Membership.leader) \
	(Membership.id)

###fields###
raw_query = where(path: id_or_path).first
csize1: 2
sql1 :  WHERE pages.path=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.path=? LIMIT 1
csize2: 4
base = Page
	components = 	((Page.path) = ?) \
	return_limit(1) \
	(Page.path) \
	(Page.id)

###fields###
raw_query = where(path: normalize_path(path)).first
csize1: 2
sql1 :  WHERE pages.path=? LIMIT 1
sql2 : SELECT pages.id FROM pages  WHERE pages.path=? LIMIT 1
csize2: 4
base = Page
	components = 	((Page.path) = ?) \
	return_limit(1) \
	(Page.path) \
	(Page.id)

###fields###
raw_query = where(private: false, hidden: false)
csize1: 2
sql1 :  WHERE groups.private=? AND groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.private=? AND groups.hidden=?
csize2: 5
base = Group
	components = 	((Group.private) = ?) \
	((Group.hidden) = ?) \
	(Group.id) \
	(Group.private) \
	(Group.hidden)

###fields###
raw_query = where(private: true, hidden: false)
csize1: 2
sql1 :  WHERE groups.private=? AND groups.hidden=?
sql2 : SELECT groups.id FROM groups  WHERE groups.private=? AND groups.hidden=?
csize2: 5
base = Group
	components = 	((Group.private) = ?) \
	((Group.hidden) = ?) \
	(Group.id) \
	(Group.private) \
	(Group.hidden)

###fields###
raw_query = where(reference: reference).first
csize1: 2
sql1 :  WHERE verses.reference=? LIMIT 1
sql2 : SELECT verses.id FROM verses  WHERE verses.reference=? LIMIT 1
csize2: 4
base = Verse
	components = 	((Verse.reference) = ?) \
	return_limit(1) \
	(Verse.reference) \
	(Verse.id)

###fields###
raw_query = where(site_id: Site.current.id)
query = where(site_id: Site.current.id) [{:method=>"", :class=>"ActiveRecord::Base", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3368>, :class=>"ActiveRecord::Base", :class_name=>""}, {:method=>"current", :class=>"ActiveRecord::Base", :class_name=>""}, {:method=>"id", :class=>"ActiveRecord::Base", :class_name=>""}, {:method=>"where", :class=>"ActiveRecord::Base", :class_name=>""}]
Table Base does not exist!

raw_query = where(site_id: site_id, section: section, name: name).first
csize1: 4
sql1 :  WHERE settings.site_id=? AND settings.section=? AND settings.name=? LIMIT 1
sql2 : SELECT settings.id FROM settings  WHERE settings.site_id=? AND settings.section=? AND settings.name=? LIMIT 1
csize2: 8
base = Setting
	components = 	((Setting.site_id) = ?) \
	((Setting.section) = ?) \
	((Setting.name) = ?) \
	return_limit(1) \
	(Setting.id) \
	(Setting.site_id) \
	(Setting.section) \
	(Setting.name)

###fields###
raw_query = where(streamable_type: "StreamItemGroup")
csize1: 1
sql1 :  WHERE stream_items.streamable_type=?
sql2 : SELECT stream_items.id FROM stream_items  WHERE stream_items.streamable_type=?
csize2: 3
base = StreamItem
	components = 	((StreamItem.streamable_type) = ?) \
	(StreamItem.streamable_type) \
	(StreamItem.id)

###fields###
raw_query = where(t[field].matches(expression))
query = where(t[field].matches(expression)) [{:method=>"", :class=>"ClassMethods", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3f48>, :class=>"ClassMethods", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3ef8>, :class=>"ClassMethods", :class_name=>""}, {:method=>#<CodeAnalyzer::Nil:0x00007ff5eadb3ea8>, :class=>"ClassMethods", :class_name=>""}, {:method=>"matches", :class=>"ClassMethods", :class_name=>""}, {:method=>"where", :class=>"ClassMethods", :class_name=>""}]
Table ClassMethods does not exist!

raw_query = where(the_datetime: nil)
csize1: 1
sql1 :  WHERE checkin_times.the_datetime=?
sql2 : SELECT checkin_times.id FROM checkin_times  WHERE checkin_times.the_datetime=?
csize2: 3
base = CheckinTime
	components = 	((CheckinTime.the_datetime) = ?) \
	(CheckinTime.the_datetime) \
	(CheckinTime.id)

###fields###
raw_query = where(updated_family: true)
csize1: 1
sql1 :  WHERE import_rows.updated_family=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.updated_family=?
csize2: 3
base = ImportRow
	components = 	((ImportRow.updated_family) = ?) \
	(ImportRow.updated_family) \
	(ImportRow.id)

###fields###
raw_query = where(updated_person: true)
csize1: 1
sql1 :  WHERE import_rows.updated_person=?
sql2 : SELECT import_rows.id FROM import_rows  WHERE import_rows.updated_person=?
csize2: 3
base = ImportRow
	components = 	((ImportRow.updated_person) = ?) \
	(ImportRow.updated_person) \
	(ImportRow.id)

###fields###
raw_query = where(verified: nil)
csize1: 1
sql1 :  WHERE verifications.verified=?
sql2 : SELECT verifications.id FROM verifications  WHERE verifications.verified=?
csize2: 3
base = Verification
	components = 	((Verification.verified) = ?) \
	(Verification.verified) \
	(Verification.id)

###fields###
raw_query = zip.to_s.split("-").first
query = zip.to_s.split("-").first [{:method=>"zip", :class=>"Zip", :class_name=>""}, {:method=>"to_s", :class=>"Zip", :class_name=>""}, {:method=>"split", :class=>"Zip", :class_name=>""}, {:method=>"first", :class=>"Zip", :class_name=>""}]
Table Zip does not exist!

success: 399 / total 594
